
package com.tamimi.sundos.restpos;

import android.animation.ArgbEvaluator;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.Base64;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.animation.Animation;
import android.widget.Button;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextClock;
import android.widget.TextView;

import com.tamimi.sundos.restpos.BackOffice.BackOfficeActivity;
import com.tamimi.sundos.restpos.BackOffice.MenuRegistration;
import com.tamimi.sundos.restpos.Models.Announcemet;
import com.tamimi.sundos.restpos.Models.BlindClose;
import com.tamimi.sundos.restpos.Models.BlindCloseDetails;
import com.tamimi.sundos.restpos.Models.Cashier;
import com.tamimi.sundos.restpos.Models.ClockInClockOut;
import com.tamimi.sundos.restpos.Models.ItemWithScreen;
import com.tamimi.sundos.restpos.Models.MaxSerial;
import com.tamimi.sundos.restpos.Models.Money;
import com.tamimi.sundos.restpos.Models.OrderHeader;
import com.tamimi.sundos.restpos.Models.OrderTransactions;
import com.tamimi.sundos.restpos.Models.Pay;
import com.tamimi.sundos.restpos.Models.PayMethod;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

public class Main extends AppCompatActivity {

    Button back, exit;
    Button takeAway, dineIn;
    TextView userName, shift, date, payIn, payOut, timeCard, safeMode, refund, cashDrawer, annText, mainfocu;

    DatabaseHandler mDHandler;
    Dialog dialog;
    String today;
    TextView focusedTextView;
    TableLayout categories;
    TableLayout AnnouncementTable;
    ArrayList<Double> lineDiscount;
    ArrayList<Double> DiscountArray;
    TableLayout refundTables, table;
    ArrayList<OrderTransactions> orderTransactions;
    ArrayList<OrderTransactions> rowRefund;
    TextView text, nettotal;
    int idGeneral = 0;
    String data;
    boolean CheckTrue = true;
    double netTotals = 0.0;
    double balance = 0.0;
    boolean flag = true, flag2 = true;
    int textId = 0;
    double totalAdd = 0.0;
    double cashValues, creditValues, chequeVales, pointValues, giftCardValues, cardValues;
    double discountAdd = 0.0;
    TableRow rows;
    DecimalFormatSymbols de = new DecimalFormatSymbols(Locale.ENGLISH);
    DecimalFormat threeDForm = new DecimalFormat("0.000", de);

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
    @SuppressLint("ClickableViewAccessibility")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.main);

        mDHandler = new DatabaseHandler(Main.this);
        focusedTextView = null;
        initialize();

        Settings.focas = findViewById(R.id.mainfouc);
        if (Settings.onOFF) {
            new Settings().blinkAnnouncement( true);
        }else {
            new Settings().blinkAnnouncement( false);
        }

        Date currentTimeAndDate = Calendar.getInstance().getTime();
        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        today = convertToEnglish(df.format(currentTimeAndDate));

        date.setText(today);
        userName.setText(mDHandler.getOpenedShifts(today, 1).getUserName());
        shift.setText(getResources().getString(R.string.shift) + " : " + mDHandler.getOpenedShifts(today, 1).getShiftName());


//        String na= "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAMAAAEwO1XwAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN\\/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz\\/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH\\/w\\/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA\\/g88wAAKCRFRHgg\\/P9eM4Ors7ONo62Dl8t6r8G\\/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt\\/qIl7gRoXgugdfeLZrIPQLUAoOnaV\\/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl\\/AV\\/1s+X48\\/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H\\/LcL\\/\\/wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93\\/+8\\/\\/UegJQCAZkmScQAAXkQkLlTKsz\\/HCAAARKCBKrBBG\\/TBGCzABhzBBdzBC\\/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD\\/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q\\/pH5Z\\/YkGWcNMw09DpFGgsV\\/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY\\/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4\\/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L\\/1U\\/W36p\\/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N\\/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26\\/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE\\/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV\\/MN8C3yLfLT8Nvnl+F30N\\/I\\/9k\\/3r\\/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt\\/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi\\/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a\\/zYnKOZarnivN7cyzytuQN5zvn\\/\\/tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO\\/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3\\/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA\\/0HIw6217nU1R3SPVRSj9Yr60cOxx++\\/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3\\/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX\\/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8\\/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb\\/1tWeOT3dvfN6b\\/fF9\\/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR\\/cGhYPP\\/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF\\/6i\\/suuFxYvfvjV69fO0ZjRoZfyl5O\\/bXyl\\/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o\\/2j5sfVT0Kf7kxmTk\\/8EA5jz\\/GMzLdsAAAMAUExURUxpcQ8ODxIREhERERISExEQERMSEgUEBgYFBg4ODhIRERERERAQERMTExIREREREhEREhERERIREREREREREREREWN0cxoYG\\/Py7ru\\/wUVPVp2pqaOko9bc4FBKTXt7fmxpaYKNjXuAgd7i38PJwggEA\\/W8YP3Zlv3VifKsTfzKb\\/GqO\\/3QfPe3VfvFZRoJA\\/a7bu2ePPnEeP3dpN+fPvrLhOuUK\\/3hsffRk\\/HEay8FAlAGB+WpR9mRLfLMeTofCeOvW\\/vDVOi3a+y3WPm2RteeTvGwXmA2Ht57BkAGA8J+K\\/KhKMqLNUwtHEomB4RDGKJcJeaLHvzlwLdyK45RJ9uubKhrMPLPiFsRBNKXP3FBIrJ7QN6lV8CHRHI3CScaBuq\\/eNWAIfft5IQMBuPEiK45B5kYCeQ4IO22SF4vCcuST+ygUHQdCeOgK9OmYGoMA9u6e+tKMYgqCPKTB\\/rPCdpnBsx0DefWaOuCB68eEd6QDPHctuvOmWYHIZo1BrJRCP\\/+78RAB\\/rkW9m8QPm+BZtIF8SbX8JgBvz6rZ4rGqEQSyc3B\\/mrB\\/z82vHjc8yvQ\\/PAiP1NLc9VB5VfOfrunrSEE7NoEfm2LuSRQuPLUr6EXPngCvrsg7tTJOvhzb+aMfzo0qo9KNFKL707JXpRNvClZzpQCeqiCfv7xM6ldJJXCI68BfrjNOSrgndUCu3ZT9jCYMMhFclmI+vliObUyKJxTMpnS\\/lcPtxmO9CrHd2Qal6HCWBBNqBxEVFrDvvNPb1SPfv7jtUkEYUMNejLMR4eI9V9OcWVC\\/r3bMOcjOO\\/nt7qo97Du8NyjamUSqvQB1x1P4B0GfhnVtl3YXGnBeBLCDM1NeG6GdDegviBaYJjTud+Te5mC73NX50\\/W38sIvT3C6d+a1pLB72NdoYwSvf4RH+WO5STE\\/2+wEBVMfKJh9DmZLjTOvmhnqe4IrRPebBYW32YZNKMqMviFqG0W49pbrHHh\\/\\/\\/\\/9KultSzrfn39evMsO3n3PTXpP7+\\/v\\/\\/\\/6D715MAAAABdFJOUwBA5thmAAARoElEQVR42u1ZB1gUZ7c+M7uzs7PL7rKUXboUQURUbIiKESEQJbFEY0f8VX5N9Nrjr0ajoNEQo0mMV2yxYOwNu0ZErIAVCyACSl96Wdg2O7s7\\/yxFOvo\\/997\\/ee69fvoMc\\/bM+73fOecr58wg0Lwh75P+canbsMwdDVL\\/\\/vEYoda\\/qpem+L+9DX4XV082SkR54I+PShJCxHUSLNoKB2YA+u1O0igdzu7qN8c1ZuXcOt0E0bMa1O\\/tbURjxFV+nSOy9Ug6hRolwOuHoOl0ZO8RvCm23VGiXnATsGsBqc0zCqfO0vn0KL4s0ijkla2pGbPwwfe5uQjgrpvVn8\\/bdVi5wKhR\\/8H6k1i2m75oFPDE39PZ5SzLRKMg\\/LISkXeh9psZjF1z6xhpspPhwL+gwcm6e\\/UvS6U1jFvULTB9NJiBrbKt0PBAcLe5xt\\/y6HClkk8SoCF5TjE41A8Hh8Lkp3mvd9J75C46IVH54GwjBqfP6bJfLFrkzq\\/yi990wu3cPySCd70tnHQhfZrodETe6KiskUlhrCYe+eV1EHP1kjTkiN99j1TDscbeEDJ2V1CsklCjwcdATfQ8ADRo6u1hYWz9OxNZWg1K\\/he88+\\/V2C6\\/c4Qw3tSHoU7D1YD6qyyODkOtDLqbLTEHk+4K5U75Wo4Vv\\/Bhcw2viym3hmLWAF9LOtQ8fKchDKOrr8EQiiQolKNl+WyvC38dRo1N759teZ3xI+KG3acy1ERjby7nHxTEeI9d5DJQZT86+hMfU7JBw6tYPW0hfSI4KhHQ2Nqtsa9d1jdowvf\\/J+cv2LS2lwGRnFxxLc17yPHweg1Xsyo7BIIOskPt8vRO5zdPpCc38szKXJoUdLqfvawk6IQUvI9fyHtnz8nDJoWyvqqZqxf3SFUmqVJy3ml6HxppGXd99++CVYr8XkJldNO83vJGAZoioLDrQdUj5eKfAKHrNgUcrSxejGBKxxI11NL2rL1mQDdoKLEnCGsojLIwHfCw+6sLKlbjMiOEWropTqiCZWiaVVym53cqzf\\/ADPlfDcERTdM9kC0ew8l2IfWNa5O6TPjUUAHf7qsMTESGrSY6ZKnvRz2EZPEUQIivDlLo7fFME7AuW\\/Tg945tUfvTWgpoXMnWieR84cQzeoWcpWf5g2V4B5BZ+QrMOo8fsh26ZOuZqcHRsnU8FYoY7MtGrW8yqAmCSwdCGeUXHpoDvdNqBz\\/p9\\/XDzf03XahJNC1B+KZxeY45bSDqS903Q8SBy1NqfMuy4PqxndIdkq2nSJPRCZrJ18o9r+xvMzBuQgUrPwvgpn9Ph\\/PBN7ll01NuiUamzkmJWhLtc6V6QNihZa0hhdThhcv6aTPuxmSsn35+4Tm3P5dH7ExYkAJmITvPzZaVvPn0zurWUxnnTEGAp4JgjvepRwMCHt9Y+gtIykfECzxk1kiaj0PWVKolC06qCfUcnyM5UY470rpdCTZ0DbhYw\\/f6c9zThDA7IstWeyuqHSerZ4UlZExE1bbn\\/L+fE18QuWhGwpodPZU5lr5pvFtdn59uB4J84pigm\\/eN9lpggV2J+crPgjzSz605ldAPZu9b4pXrqdrfFgITbRR+e5HAT393elU97XHAzwGviuiAopeeSQLT\\/oJw0jhZodnJgTN341GxVSlU59kUKEwGy7KAreD2oZ5VDs7XeiU6X6h\\/rtm5zEU0fE7yHI4WzEUeN3BD0N3a4NsaZl8lgbQAMZxWUGxmu6Wh2VHORQXaGq6RmVkrOPOPcSJeryJxgtYqWaw6QIu4oDpMw2ZuOK3WhxZAR3OZza2jJfb+9hHyEfLfAanf5Rquxtnd3s7f\\/EdpzolpyT0BRNrGI6TTwwKsQh9\\/u4ZicQbctOfb2C0m2vTYGqIerNFztPy5Z9F8lAD1J6LTP84raUHSAsIodm0jFGagBGs5jVRxab4cUOrguOJOzPciCZ2eq3Z6a6KfGp\\/F1tGONYZanCMr6BAy8z5GcUlTJhVMxSxLWBZQZlWuD7rm1n2HvH0IPjXTM61cxwFc0bVYjTKOkKFglcfXgUP\\/iA7MDxyYCUVUpQnphqXiSr4a5deySIdCPY+yT8trl2VcrZn59sEJMCHVtBphU3yOsABs8oD3pJ+k22ZjPtj24AsvYtIkadHbuMW\\/BY06Q3xR3p\\/yfvHskdKCpSz\\/9Ifds9qwqJWw\\/q0z6svUGS45MrmobiR95y8hvB6Spd+ECW75tB1Y+BjzBbggcGNgD+yeiBgf1ss2AzxPjat1IARQTsq2tmPLo2oovusii1v8UjHhdnWeh9oMcTnqpQ+uSBKwJu\\/cW9MOpFYTOewRc7wKMff7x1N7Jx1MM\\/\\/27nSI8vV\\/XJ096NYKr8JWEIJ1w+TkGJD+XWbSZdPxi\\/5z054BiPv+2DWsVLIxdP3KX3tOHNAKoq68cm7ta8p\\/732dwqRm0YFsCU\\/plXxABddvful436VqhMBiQHZLCCXaUNgDSw667piz4q8UwTXxb5F+9hqez9HgJxkAadNejniat6xNKPdlVRr\\/jO0nj5xunnJ\\/MfmLxP3NhS+doe9h8Dm0xp1oY77aNKQi+zFyKH\\/1ocAXJTKvs1cgmwV6Fvq0d3TKk5vftE1ImIpsqYv2M4cb+wKya69Ev7yz6va4O32TckHarzJp0DqrJHlbCMwa\\/bKH9IFdyjCd5S0O6sEtKCGV2+8dN4PHUh\\/2i7\\/ZtgMZ283ExGOfE9xe+tShwLJXv8iJJ1yHHOzZO\\/bBMAOXtJ3UzsEXdZ\\/Urt7maX38WGRiX+3X6HyrlZE9vXotGJE+etehiFG+jUumMbdndp7DETxVRGFo6uyTmN2BOa5\\/3ZjpeW0trEgI5Fz+fOPI8UQ7A+v67KGetSRkT\\/IQiOJP4B3cNDlh8wQyZ2z4XLnecMw9vx3ImTiziw9XlAkrXMcczNwI+b9qTIVwYlJ+0kAT3efG\\/aw+H2m2W0L1Mu2cPcyKv2fHfuuc261KDM\\/vBeWLEaQbN8U1yrTuUbophzGmMBa7jxrTggqwKdAZfxlYe9PfpSzOK1OvIJYvKgJjKdMsIcERRIftOUeB933CuDKsqgSgDYjRdMml+1SVAEhOGvOOVhC93mSh3\\/4KAOciGsdI0HG0Ap0WmGpLZCq0i79NsevSnmbJFVePmMjJAEfIEdYIg5gMT2YjAjCtCb6i7WqlGjWCU0s3IJryMQNCIJiKbLAM6rKlehWJ8ypFWiUXGjKfpuSKxHAMgaa3A80aYtAbaJqG1vsYk8QhRhvbSa50XIpteLfDtjgsjFKzorDxkQYb2oN8YPt\\/DvlI8pHkI8m\\/h4QLmmZSi8TYeCpiVAtFXa3acDW+ZyQ\\/iARv7zGTMjihOTn7NKS7D+e8hJ6Cq+CKFf8E7rk8VQtg69dJHbvr3SCN164v1zmfNRRyaYR2gs924f0TMC1Ka3AJH3L50\\/bj\\/Jmjgeh4eB25q8lbjq+Cyu3LES3Jotk0Ro2IpxBa55+Z5xcvNtSiMOqydbWSYxl8sE+XvYXQSesk8Mh3f3FLJXKuCEq1BpZ7NzgPOGUggi5bFLHnnywjmOOzAOwqbAqdCqmRujNv\\/kWSOmOYCslGxStl2+SyUS24FaIG2zSU0GpZfCVz9n2zDdW5Zvao4kCRba7\\/fQmaGxiT35HXOrJEHZmRj7s+ByatkHMMesS6TOua1SNXiepN5SIlWBahgKISpljB+GoHyDGs\\/QkJjKiLTTux74BEHWRXChZFQAFWjDO5iQLxyFWIEa2wiA8KI4zhsBSnG5gkBChcjykwzCl9VATR\\/vxqn0T33UM09JBlUfxgHFP594+0zTCpMtWxqwQKjOmTRHgqA0aJlHqaq+PrWRRqkOQ4liLSXgxL88q4ExImImeO21YrK+zs16991R1cDg++A8BS3++PKEQGtDZ1kP9Fnrh8+CU+S68Ng8Gl0WNjvQ5Kynwzg5MPNITlPSQ4yVOd2O7OewVSLnx6d9p+6foARc8i6OV7UQBvvI1Zo9b60YBH25c4yNyKgDv4cerMMXdMo\\/IKWKjb8I0l6ud9WydJ7VhilymryfLdUOVp7G7ZiOlDViP2G342A5uXpiZlyUKwMcsX0pAKMNRS45JRZq\\/ha+6tAMkZkz8M6BPCdum8bnnvJwH1eVb3IqgFXuGDmhpX113bly0v3L1XU2a2mMfvnfZdaeqzYTY5D92TBIMMD3bu1vkkuQTCcZCGgNtsBX29Jrdtjy1J6lxpf1XKeuK1f+Ab8e4uUsi0sB68ae7zuDWXg5Ey\\/FG1k\\/bskZVMFXR4YpE15HK00dsM+Ui6ler0aCz43N+jIpjovdddzAzcOif3RTIBcf5LWZnOVWbw2mu4075nJLpp1Sr\\/uSbJFtonU2el0g5hebYuPYvHzOZh+WO3TLku9EhK9rsUZjHiRswOolMSbPVw76h5oMuytHzZdQp015ZLH9MikJ0bu7aq+F5UFbhmnrKapU9JZOrgLtUGI2QQUwhM\\/HJoRdrpUwtQYkvlodA79g4+nVqiPl+oDN3o\\/NYXutTkJJcKpv4ULUusXrEkAyjqM96wLRJR91O7f5B4pIEPiGM2wfxNAGhxfB22z5GFsXd3Z1+bYJFYMcm00wSaWSWSPY8U6s+vAM8o+21eA7ZWLGrVEIzp79fhMCpOB6R04NGxFULxEQ9wA1vjDsxcbA+oplXF+vuU2ScEAAGdkdTZ43Q7\\/ZbKl+7jmlIM8FmcLDTc6cEQKLaSXrTm4l\\/\\/CaFzHAbHgkG8cg7scriQj\\/e+2vvhaZ1iqD282XbJz02tadlfOyTo5qFD5ftSh2Mcj2muoRWix+vOPt8RfCVMBrDnkExKW23jfl\\/yrDwyddvQo4a\\/ZZSlJUS\\/mVP88IocsGqr8c+2Eu\\/maQckjM4x7HtaHcnxupM+Q+VEnPgkJjhVovf5zUG2a41b+sjEL29rOJP+Y3HoTgx234iplGQWcIRSS838X6oy+SU++\\/XYau\\/3rJP6RgjHeRfYHZyQfy08ycf9qnLSurV33rof2BSxUOf+D7F87gtwtokv6jEke5tw1kt+wPaZcUoB36ecY2n9mxCcxxrjwdW8jwTCH06IH57+xnJ4xqC8yBn5Xs9Vw2DzGLDJyUPNZywdWfasbCsufl494KcV8YqiyuXHOULvM0s28Lz4Jfd9JZLxBsDJTl4yNn4nn8yvwMVMocrsQuv2ciLSDQFxflC6ORwmxLsfDzlsyspSiwnT8JDXqevemJuOdUPE1CP4dHwofx44WXxVRXa61Tfq1BPT4R7\\/AhR+feivoaE9l4eyeCB0irHfY1v4+ZQbBVWm22ZYUUCkOJoIBM\\/JJ17ee0KZ2n13ARJCmz9fxP6QmDCLozBuuqy7fNM8VXqY4qsjYPuFZT5EP3G23HZI6Ox5N+YompwGIU9\\/nvzUdeeUrhs8fEtjZ+9ykbzpn\\/aDb37rEXdE4uMi4ijkti7eW5RdUQXo1AKduiw2zLo27TrMt4iAYfGfBMQimr4ZklNTy2HUXs+j26PNXB8PstGsFGvqK\\/uGRrZHUqdHTKe63zYHKygFKLR+4ZgHzroUz9c8ClPxVL2ZLS6NtC1XYZR1mqTYjEYxijfqnMI4ofx1xyqb90m3esXSQGEs5kEHQ80QRM\\/CLMtE7KJqqVklyKT2jymRgGsNtYossCvoIiZuGr\\/cD6Iy8+1phHRMB7Ea2fLdTS7TNdJA0C4JbpQR42cc8yRyAZcPFeZsuUiOg+KLRCAxOc4jtSwAqYyj7yu+JKo1oEzCpFIMSgTXAhEJC66VR5ur2cCGJpK27jKSMBw6LoLK0Ls\\/cwCRc5fDNtDiJiB6i5PmFebBf5qLCm09bmA6PkWy+z5VO0IeiTtXgrBWXMT5Q0KruBS7gaPBjrYx4daRsJFqM4QvBEh1AsgG48UJOmo8r2ep1zbA94NcVYiBW8Wu+zBWb0nL93FNxjSaguprxfDhRRLN5JosmuIZOeg6Auj4G0E9jQ5hc\\/hq46PoB5IYmJ4MWuP7IbrJTR2T1E8y5ned8T9b92EkbJ0x4HRjqFu2D3AH\\/v5HgOxU+3+5+v1I0kn7J217kTT4D6h8AAAAAElFTkSuQmCC"; //SyncWithCloud.data1;

//        String na= "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAAEH5aXCAAAACXBIWXMAAAsTAAALEwEAmpwYAAA8GUlEQVR42u29B5wcZf0\\/\\/p6Z7X33er9ceu8khBogIE1Q6UKkYwFsXxEVBQuioogFEQuIyJeiKE2pgUASIIWQnrtcyd3lyu7dbe+7szu\\/9zN3G44QUPnr95uv\\/zz3mtvd2Zl5nk9\\/f562kqZp+GeL9IFvSvKNEQWYICEcjsLtdjuTyeTvnE7n+nA4\\/AOv16tfHAwGUVZW9s6bEkPDmq+yGv6oiqRTQVUoBEd5GUJ89fl863nT0v03FXhTV6qg3fbKXsyoL8fZMz2ojCfwB38fNqhluHOyF5u2bcFJixbprdNvCgZj2rpIDs8M+WHx1sI\\/GED76nXYWzYDWPMYrrjlG0jwAbVD+\\/CVC04ZvQlaSjv7j20o91iwPu3EMZufxN+e+AtSxSLME4\\/AnGPn4pwzz8YlkxTEQvE9YzUFNVOZD3O+9QdUPvUzKOd9B7nNa7H39JVIrG+D1vYiymctxY6bVsDj8Uj7WS5uPOWmu\\/Grz1+KC848F729O\\/Ghk47BWn8K6V1vYsPG9Zg5Y\\/rbNJXKddddp913332wWmywOxz46lduwi9++TO8\\/NIqeL0+\\/YZ3Cff111\\/HtGnTeIF3kPKpZlMQiUTOpNyelmX5X6AR\\/\\/ab\\/vkbErwhEhtEndMLDWZEo1FQQT+bSCSWu1yuq\\/h5WDDiXTfUusrujYQzl3ndVvRSa+vtRgSjQ6jwVpaUdJTFeaHVmZgmxw04oSsK604\\/fvzRqZglJXHKXjueaCpAdtiRSYR5c9moIAOxqPZqtICBnAlHOIz4QZeKKeoAntjRjTnZJC698kwcbclBZnMlCuuvuzTLaclsHr+NKWh88B489\\/p2bN\\/4V5g\\/dCUmnX4ZevcN4IstCr5+3rJRLrGN2oDTjc8ftxzdfW0448KrkZ91MX736kaoHZth\\/thH8MRlizA3l9nPVu2RRx7BvMUnYtatL8LzxOeQmXocZhYH4W9vQ1wyo71tKwn3vq2MZKNWV1+vK2Iul4Mim3DPPfdg1uypus3zeKcirl69GkuXLkU6nT6GivgqaRMKGaIilolrSk7jf0A1PojG\\/rPlf66S5NgHobsVrkqYtDy\\/MUHTpB+RuV8QYvCMMVcwXRSh+JIk6Z\\/FKz\\/\\/iafPLT245LkPWkmtw619+fUIH2rEZ6pMcJZZgKIZI3TMJq0Al8uNx\\/cNoTOSwcyqWpxQbYCCIpKREJ8gwy4q52s0GJTeUUkkFIbD4+7xJ9RGgzGHN9tDOGZqLc7YGMOlPiNeoCE\\/0yFjutqOC+fVoj2iwWUsotVfRF2DGUbZhq9PscLDh4\\/EIrDmJNjdJqyPZVFttu9X3pNf2tn73Kx6L\\/4S7MfOYTMM5NGaPSEMx1XcvfIIHK9JePKFVbjsmuuQzuZgN+dx3jd+iz\\/d\\/mm0NMzA1rc2on9wDyJZM\\/4ypOKaujyrLMDn8VyvV0K+fpUKfauobU17FLu9Try05i08uo0XNtbAHJeQoZVXIoEVC2rx8iudCHXuQ8rLtqeGYa9fBvTugGa1Yv7iKjx5SiM8Djd0LkUiv39HIBEu3Ov2YP32t3D6Vgem3nUpIuEElKUr0OOshXnmqRhOy1D8AXhe+B2qVUaopmtQbPbgmmsuwCP0HCdffQPu\\/+xZCMdUXSEYGqR3qfDw8LBmNplw\\/bU34JmXnkE8OAhNsaDCXYe0GkcyHofNrmDBh87CgqZm\\/OyXv0NGy8GlxhBJZhEODqNQKAjNquHj\\/O9pJ8JXWCyWCXRlXX19fWinF+rt7dW\\/q66uxpw583DWWWfBbDbDwSioa2YkIl6Eb1n7v2eMhyv5\\/2klwkGaixoS0RxG5CJqTTJjoxFFnovFYjAajbDZbEcy\\/F2squpEq9XaqyjKw4QhLwmDK4U\\/AVNofCWk8Q9XoolKTDROu90ugjPy+bzAOzAYDPvd\\/lglNlaS\\/ocqCSoaJrosWnAkDKNJoWt3IZfOY7ggoz0ewzHVXuTo9lPFBFzuKhhJCb0EhEsac+3S+1YSimZOd3ssT39xcxqfaMxhqpUu3eqFmksjkUxin5rFaykFZo8NjpSKpdVO1EsKQvRvRUORgcvJoKAgEQrd6vX5bnpHJap4V9SO0IrS+tU9PTi2woPZr0VwfLkVMSmHhbIZl892QQ6mkLACFlnB5zYEUV7bgLMbZSy1yTCreQQ0BXI6hiqXDhe\\/wuN7+ysJB0OIGGStku45G0lgx0gC05p82Dqk4cmIir5oHB3twzhtmhUdqgv1xizaUmYsccrIVjkQHRjC3UvrEQxloJnS8Dl9jCU57EsqUgOhZ0mFOyLB+MQ3RiLoZWuqh+OomzsRF77Sg3leGQt4U8jmwIsEh4uqHdg1MIg2KkFFVoO25WWcc82XUVetYO9IH+aUVeKkCivaVDuOLVNEwrDf1WvdyQLM4Rj8OQvekrN4eGcc1bVudPsZ9\\/2t+OYJy\\/C73z+CJ196Fp2btkM2x6Bc\\/APM2vwSujPbcM03HsJ5RzRhVajIHGsI1832wsEKUUpkqIqam6z66qYo6h0qapUcVplr8djGTizfvgYnLJ+Je\\/\\/4OHrfeBNZoxmenB\\/TPns\\/1n7uI4h+8k7Uv3Efcjfcji9OLofdlMdnWpwUMe0mEhXqLe2HwLrKaVFc8kI7Pj59Jk79ww6YiExyNiMMKQlFaxK\\/OW4mvvfyBuzpC0IeyQGVNcxFy1GTHEFH2wC0lsn4zjmN+MoUp65VJfi\\/n13ihKwa4bEU8cMntuLZuy5H1dQl6Njejr2hKBauvBnp9qfRbPPhwZlXwWGJQts5hFjfHhiHqcJUa\\/WlW3Hza35c36QKJpVs5e3wK1hmYO5s48WG3w7inOGNeOWH16KsuhbJK38PKTWAIasPmRHaTnQYyr3nI5Ij0Fi2Etrpn0bdhoex3NGNr97zO1Sk46IOwSo9BI93kEF6EV+M\\/mfmotNx5x\\/uw7KWKiy56LOILfgY3P\\/9JaRSIUjMUbKzV+DGs4\\/BurVr8OqGjbCli1Dzw1iy4kw8eP9vx1v7u5PREts+d9PX0frWDuzZtQUZtipvlGHRnKipq4E\\/ncbRC6bjmCNPpNsx4svf+j4MSgZqOIRLL78cP7r99v1sOqirp4elUyzesWrVqs\\/f8KUvoae3h47QSMBgIxVJAS7ojV3o7+\\/Dgvnz4Keqnnb6CvzoRz8SCUrp4av5fjk9Nd6zElFefPFF4Wn3dnZ2Nvf19aOjo013+QKZ1NU14IQTTsCyZcv0SktaRJefZCU6dBEV\\/kOVTJ48Gc3NzRhz9b+lq7\\/8IK5eIPnzKGBNeOKKigr83Ur+rZHxcCWHVCX\\/E+UwIYda+c8jJDnupECSgYQf9oIPNq8BvYSuk1wSUhkJNqsRo7dIIiQI5+nih8\\/zuIpOtE7g5VIpOdNSEU6VIF3PiEUZw9Hi3x947naPx7NvfONK4L1UhKcX7S31cnxwQtKSYrWZXyWaWyaaksvm9MaKUjDIsBEyOthYTdL4YAXpZBr5bASqLIgrkBArA6ggxKjfE2dDcwV1f73jG8gMvY\\/PXkxC\\/P8SQhxeo+\\/Pr2wNbmZ0\\/\\/jCJtQSARtyORSKCgyypCcVomRRRC6nYiCZQFwtoiuUQ4xEVTisqMwynjK7MVGCDpMZBUrJWiigwk1kZni7C3ssturvhbQPaPAyfv\\/6P01IKDl88VDHyAMz5zSgwGfLshO3bO3Han8W0\\/MJXL24ERPdNniYjuVlAdXyKKQTeGVXABOaqniPEY1Ok54DqvzOmDHg3tZ+9HhqicgDqPMkEZG8qAgN4OZFsyFrOURjKR3XSsyktKLoHiWTRPOKko55glHRmYb7SMjl70nIb5gOiJImJ1bMmaWZLQlMMFjQG1aRZgpXac2So8yuXE5c\\/ddd2OusQEujF90dfcjYajAcj6BGymMu4e0VU6yYUl2B1u5ONLLh7hRTQEcCbmsZXuhPQrEB+0ZSeDOSIQcJNOwBXFlTDTUTx8T6GkyyF9AWLCBOIOLUiqhx2WAsZOEqr9jf8Fy+0NTav69X2Oqc5qa3CUmlUkL\\/Gq0GS0\\/aKGFLexdy1dVoJvZOEJXWlfsQD8bRU2bCsQYnFj61ASfPnYYzKpndxfJYG\\/OjVaqiSoTgD9IpyBoGEjZUmzJosmnoURzoymYRSQ4x66hAIMJc15DBV5llGJihbO8aQMFmx2S7B8ZiENWFHC6ZVyMGDSgQBXFLGm6TBesHsvjJ2gH8\\/sIZyEfSV5gUw70ml\\/Ed7lcoa8EfGoG1aNBVN800Z\\/VwCo93DsPK1KhFC6OxuRGVkgW7t+\\/B6kpy25hHndmJ6VYVyVwB91F9ri5TcVxzNXa27sbTf12H11Y9jPbhJGxGE5zpFFKRNGKpMGY9sAE7rr8WSnEffI21MNQfAUO5Get\\/8T2Emcyn6TC2U0V\\/tWkvjmosh3EgguWzyjGfyUpeNtGjeUWjma9Kif2E5HK5n\\/D99WnqY2csh589twmLj1qA0xucCEeDCMg+PNfahxGC4H2qjI370rAUhnH3kibc+toQjjf24rtnnYjNgQHsfGkndrTuwquvvsq0qw1XXnc5fnv7Q0hHh2D20R1nU6j86SZo934NUVcjzj73eOx64SkMrt+NU89agb+t2YDrH3gAsxwF1GZlpL1u\\/PmNHbjhqBlwMG2AVIAmG2GkB2R5lm7\\/1PHZ1R\\/5\\/pzxXRRi3PGSNZ16qqzIMaxs8GJtPI9Qahg\\/2GDGyOAAOUcv5rCj2leFIVWhnicgZdLQxHtKiwgd1W7amLsMO4MRSIM0\\/Lgfzp3rMHN2I3YFDMzSYpAnTURuymy4VRNCxTBOigSxq\\/UFpI67EL+fPQGGsihOrfLub9pYEi283BaC\\/Pn7CSHCn8yXPaLvRbg+UQxSmrrnxeZ0CI+8FYQ6MoQ\\/rW+H2elFuZneiGLvDwRQ4CMKTgvMFbUUdB1UOglf9+s4yeDH1g2r0VzfhKNcafQsuwQ\\/2F7HazR6sxwq4sMId3QhY\\/FBM9PmEUI+xzQnbUNu6Wz49rXhzPnNTLYl\\/PTYGpjV4js8lQiujDenMDN5\\/kCI8iv66qtKvrwABeVep959LCm0m5mLseTID6P3Tz+Eb8ESVDrt6NnTCpPTBldgBJkjz0CA155jiCKrSEzEP4m7N3Qha6tCV8aEnL0F5lgnsj\\/\\/NIxD7VBmnoaMx84GVUHOSzBm+Yw5J2LRRz+KLbdejymB1YgsOA9fvO1mXD\\/ZicjYwEmpUBLdfJnwDvdbeiWkuJkX36ITIsmjqkKT+s73f4ZH4EXKOBeXLp4Noz0ElYGuYzCMZ3eNICn8P2j8rjymFgehDexGYMvrSA\\/6kZ1zFCLl8+Cy2VCx+lYcf\\/wpcFs8WPXKCwhMuRCGxcdAHdyBzF9\\/hZy\\/F3Zjkigii\\/MuvBQrzrsIpy2cBJUhwOV4G\\/6QuW+wzUeK9yJXfD\\/QqI31s+iqtmXLFlx4wYep+1Zkc0mql4cNc8BF2DGY0VBfdGHQbQD6t2GY0OWKC67U73t59csI9QSRVxiRq8oxoaEZJocRFrMZDY2NePqhe5EomlCsmoajPnIpPA4n\\/nDz1XCa81i5ciW++c1v6l2Noi3j7FcAsNhBA+LBisiw+ZAgr\\/EVGZh+8qOf4ks3fQkeTxmcRhvmLV2KQDSJ8y44B+1benD2GbMxGLbixz\\/4CqwWpw74xEBEjl6vrTOIydMnM1v\\/C1accoauIgKndW5bg4RmQjKTh89mxolnnYuv3Hgj5kxr0SN6qX3ienpWC7mfPVhb\\/y4hogtAvK5Zs8bR29vb1tHRUTswMAC\\/3693zMbjcf0Q3QEC6WYyGb1jpFgs6BLRyABV1SAzqCl8Vj6fJnNMWLRoIW762k0488On7VdtMUgo6hP3iaO8vFxA51nCCY05pHd0OXwgQtauXas3UnC5srISDQ0NwmvcTCK+xkuNCiOogQ7BarXtvz+dSUHNqzrsF88QAPMgMH688f6G7fnCyMhIXNRb6ovf\\/7wPSsj\\/pXKYkEOtHCbkUCuHCTnUymFCDrVymJBDrRwm5FArB+1pNGhxJEaK8LisaE1k0FTmgq2YQ1EzELmq+gzLsflf++8R6TBht4Dfk\\/jdQp6anUqlmvjq4zlRT1R0UvO6nUS\\/m4iGd4r7RU+keJaYMFKaQCWKQLoCKYvzevuSSX12p+gkL537VxNyLA8B5U8+EHYLmC6uE7D9gAxPzzdEbzvLm\\/zuNjbusf8NQhbzvgdJyOTxD\\/uAhIyXiEhQruDxl383IefJivwIm8EbJV0iejYni25KCWUuLzRZDCkU+WQDoqEgz+ahShaIvjSHw0ommN8mhIQym9Xf22w2lMZWxOdsNvsNEvLtfykhE8tcE5RiviMZjcmayhTWYGXDxWi4S88gBWGiM284nEbcYIKLHwagQDMVYJcltDBvJ31IkvCslObVJFsxwe306pNCRRFpskiZ9UZRgiITHBvKX8Hjxf\\/PhGwZ9N+7sS97mdnnxJF1DtRI2dHFFQV1vyqpGH3GUCIJP9PbZNIAv82KDM97SHidTYJTTHDQCjDIRhTYKNHh4nKK8RG921Nv5FhHuk6I6LQYl9a+SUIWfWBCzC7LoMNQrN6qWvC5R3bg+KMnY7KcxEIpg2qHHc4yG6Si6KoxkOMFROJJZGQVnoyEsF2GyWwlKUas2jdEvTJhMJqHXUmhyVELsyGPIz0miJEVSSogQx3LRoNUUyNk6qHFoEGxClUTIpORIfFqLieTEO2fIqSvP5drrrAaFaoHFQSrBqK4ryuO2qYqnEB7mVFmwgS7oldSlGXIuQj8SQXpTBb+gowpHgu8Ngu\\/k2DIFZBg437eGsNLqSLmWkLI2iUkYh5c1aDgSJeNhFAiidzosJ0kw2Gz0zXz+bRFIfBEKoG8mhcOgXSY8u9JSGkkT3xKq\\/GgyeD0kQnYnYygiRyozUSxJm\\/DLW0ZRF1FlBeKOJrnM0YZf93aidOmNqPJqOLK+TX4772DOLOqDMZ0Fgly1lBI026M+LN\\/ACnrRPwlUUQurWGxQ4FszuCqMiucck6fXNXbugfTp05G61ASsXgAdRXlukq67A6YjPslIb0nIWLESiI3WkPpB7972pKL8rkkEukcEqqNXiSDKmMRDrcbf9sbxq\\/6ZIS0GJrpzcJpM3YNpeGW4zCOxPDdM6ZgrrEAzaJgqG8QLY56pGxFBPNZjGg2DGVy6EjEEQpreJacmmZzY747hfMmNuKBp9\\/ADWcvpZso4Na\\/rMclx8+hbRlgzqdgoyobTOZSu3u39\\/Q0iaaL0ap3ECLmspstlqq8QfKnZQMSwRQclFPIrmJ6rhJP5ftRPQAsmF+Ba98YQNbow7lUi4f2ZdDqH8SxE5vwwM4EbDGauD2CRVYZixo9eKurG3GlDAumNsBSzGNj2AC7oYBkjx+TXRICXjt8Lh+8DiOmBNpx4cLZtDtVH1xNxVTkDWmYChLsVhtVjYRoCQxrdvSHox\\/zWhx\\/bnIY30mI8BjGohRSjQZvXyyGkUgUA3YnTtfc2OqNY37GiueoZseU83M6j9s68jitXMLEohFl9U78dG0\\/NMa7kZQRjUoM24YdMNJ2FtbShVoM2CRGeeUMg2QcUXMDcskMlk6w4SKXAdva+6iCwBETmxEZ9mNahRXmSByn1tugFOn9hJ3aTHAqRZz9651YeXQNTqorg1WWJaPzAEJYnMlUNpan6AtUsQKJf2rXEJqqK7AlFsf5zdV4fPs+FJx0i3T+uwYs2M0HX9BiR5Aq0mS0481EAv2UJOyV6BkKwr9xDY6d3oiy2lokcik8vLEHRacMn5GtjiTIvQzyW9Zg2uyZsPtaUH7kXFRThadXuRBksAwqBShJE86dXo5KBt0CbeX+TX5cvcgHp8XJWCSfQmN5\\/kBCfhlLx6\\/RchKkvApZyiPvqMDXd\\/XCmbIhbk\\/jZLcLg\\/RC84i1nu2JYbWWxUU1Puwkd4\\/zSHhJc2DvhlX48bLZSGQzWLtuMx774xPY1boeKZjhyKVhSDCORLpw0t0P46ltMaTv\\/R4srgzKGuciX9OI73\\/jCzi1oRadXgvkSAH39KexfXcbPjyhEQqB6Sfm2WHms20eNx2mYS+ddcuBhKRGVFg3bGvHwpkTYc\\/FcfOLL+Prp56Fn\\/cOY4LThhyD2pOburGjv4iZdRJFXga724h5VA+rJYOGrhGcsWAqtrS14o0Nm\\/HnJ5\\/C+jfewOQF87F3625Ichp0yMgrFtTe8gACd38XxlgPnOYKNM2vROerz6Hpwzfgl7d\\/AZ54GCP0dEHJiRf6gzT4As6dWYMJuWFkFSODtUsfj5fGOpLHD4ZqqVwGBZMLD6xtRaek4JwlE1EXGcYrMQI4WzW2RTNoo7Q6\\/EG0F6rwRV8aCVsWO7cF8ftzZyCvqdi1rQdvrt+C4MgInnj8cVhtZn08sX9nPwryEOwuO066\\/Rd4dl03Jg5sRxcx2ZUfX4Gn7vwl9u5tw9zayai84jJcfOLHsKCZsWUwj7cyGdSoGh2KG4ZiCiqDpiKAJqM\\/IdI7CSEA1ExWgjfFhrTBgttfacUrA2kcX1OJxhkOTGNQ2xTNYlveAXeFE6\\/0jmDnvjSmb1qDy+b4oLlMCPnDWNPWhljnIKKRINR0AoHgMJmUhLMYg628GYbZxyNSPR3qH+9HsbAZvkt+gz6zD4vRB+e+PYh+5FRsCXixsiyBhfOmQaLNhgMD+OSCiXDbizrINBSNeoAUCLmiouKdhIg5syV8U+r235bUcM3jm3DV3BY23oC5VgW9wTTuDhex\\/vVhDBHd5pgY+XwewokyjCSyMKoxFAjGC0wttAJ1ucqH6ZUe7Nk3gHSO2Ckcg7X9TcxyqnDUVeCF1\\/bCNqkWualzUCRaMMYqUam1Irh+L6Z78rBdfBEuSO3AVUvm0Qu+HQDHzdD\\/+4TE6ZLv2eYHplTBP6Dgw44BXPQoPRPFK4lxbo8XqtUMibHDKJmg0ssUigkoTgMuY+NnT67GPW9uRWYghQhjQaKvD0rGjLSNLbIz1hud0LIB2OvmQ+rvpBPrhTJipasFlJoKYrg8zjt+EhbzmZ9a1kTbNv99QjKZTIdY+KCMDsLrxVjII2Zw4JnhIJ5oL2DkqbvQYTgBNqcfDnMlRkIhJKm\\/KtXUWl6GHN2usWIi5FgHWjrWoznfB5kouCnpR9XkZnwtfBRiLnofBjFDuA9zPXasp2eTqxtopAFynHCfeCvdMAOmWic8m17CirOPxxG1RlzT7KZavS0SkbOIFILMf9ck5pVMZu4vQWnxZ3OXEedkiGxNuOutXtzxi18D3dsxMz+ItMuJIxYfiVeeX41goB9h3uecdzqGZpyEH0wo0FbeQOO85Vi\\/oQuTytx40jITgTIP5i+pQeujq2EgEo5n6Y6ZymhDu\\/U5JxY6mIQlAc\\/plyD90tMo\\/u1+zH96C2ZZ2vDTI+YhQ2dUKmKtH9v5ZzL+YwcSIqK7RmL2f7YysluMkj6p5RuPvYzbPnMp5s9ajnh6NyZVNaC3r5dZIxMtGqSLUT91zZ2Y2\\/ocpvosGFEN8Jy1Eve\\/uh2qzYt+00T6fQXeJ76D5CsP0cNZUHb+VxAabCdy9hBYxpF3V6I47wQ0mBNI\\/e7biA134NyntuOGpbWYqKWRU9+epDY2jCcSosjBCHmAhFw8ioKZFBHQEXahSHWb+F9PI3L0Iga1CI74w00YHE4jPNQLs8OBrJgJfv4dkFx5DHa1IV+1ADATWCZVFDL09bEw4Q9QF9iL+KM3wOhk+jyLsWWwiEDdMTDYc8CsEzF7ZgPmO3J47JYbMacsgkjWi9se\\/TNOrVGQYq6TV7XxhAzIslxXsud3TBgYG03df3WOUB1qhv7aidp5LRg5\\/0lc2+KAUmaH2xVHPBrD+p443iBWKpqnUQXDmOSRUZVoQ2TXWwi3bqfDyEE+\\/lyEDRPg2PkwFpXTWykutLe1w+CxYfjoG1CsLId142MYevlx2AwpxEb6ccEnrsJgOItf\\/PLHqDcXIDO+GZS30TtTYxuJSJeyyIN10M3j8ZbutYidChSnyMhOPP50JCfMxyWXr8RixoxJU1pgYjb43Ja9uO4nf0Zq4hE4It+Bngd\\/TAPXkKKPF+sWikxPE7YyYNIRuHheFe79+R2YNWcRvvSl\\/8LN3\\/wm+nIayhIjkAsKomIiZzaEHIPF6R+\\/Fk0Eod\\/5znehqkxxHU7mI8ZSG7\\/A48cHzUcOKDfyuE0M6IthZeGWp0yuR3CIOYdCd2vMMQ1ugMfK6Or0MUUl7HaWQU3sxeBAFyqc9Tjt9NPw2muvMX+UMdg7CCtxmt\\/fg5\\/8\\/C4MDQ\\/jh9\\/\\/PqprqhH3E4j6GuGaugwtC45DZT6Ax+66BSctPxZ19XW44447dG0Zl6u\\/wOPkAxv8fl2m3yUhXxG9G0IPV15zDWZNnk04sh1v7dmK1DA5l0kgmUrrY+tZA4nTXLAaHUjlYqgl4h0KBBiGDdAUDT6LhOXnfBx9u\\/bg1FNP1XsVv\\/Wtb2EgnIZMNFwoJOEmCC0QAiXSGVTXN+GVF59DRWWlToi4noSswWiHIP4ZQkTf0vn01Q8LQsR8ECu5ItaTlMl2TJ4xFTkGwQVHLsWiuUdh95tP4+zzLtfnjgQDfn2Or6hcodPo6exFOFGAypD\\/6euuR2NjA666\\/ArUNTB7DHVjJKMQcWcxcfpMXP+5L+ITl1wEsyQ8lGF\\/cGZbfkqpfPa92vq+hAhpkAAPHzbS1dWlPPHEE7q6iFkQIt7IY5WYmIKazBb9etEHnM\\/lmW2ax1YZOpCgxwmHQ1ix4mTceOOX8elPf4bnrfo0kGnTJ+GKK67QF9AKexT9Vwaj8cDuoHnUjq3ju1Q\\/CCF6hZs2bfpSZ2fnD8RK3v7+fgwNDekzh4QdiUPEH9HvpM\\/tKs33KhTHPKEGhX68UMzp551OD758w5dxxplnYO7cWbrqqGNElNojOudIyO\\/49jLxWdTxLyFk27ZtusHx87fZ6JsEEaJi0X87QsgeCvEIhqg+o0FLQB0RfUXl1dW1mDRpElpaJvB1sg4txLPF88bNE9OfJ5hAoh7ifReVFg39ywkRohZ9tBMmTBDweUEsFvsVOb6QqbPeQeNyut9xfyxW6qQeHXYodWLrEGisN180XEiNz+7isz\\/Lc08LyYrI\\/W8nRKyMEjOExs3uES38OJHoBXxdIDRDnHyf3niVjW+lNMUKqvv5XXdpfEQQ9y8n5P9SOUzIoVYOE3KolcOEHGrlMCGHWvmPIeQ\\/pRwWyCFWDgvkECuHBXKIlcMCOcTKYYEcYuWwQA6xclggh1h5l0CS73Gh2P+hICX0zU0tWRsUgwVOm4SCWUF7MAmzwYhqtxUOLYOiJiOTFXN4jfqcy0JRTM4x6FP7SvWNbUHy7gZJUmWhUJhkNpvnOhyOGbx+Jk+LTbqqeOyfUFwafCr1Xo6nQ7wX6yTl0TkqpdNpHgF+9vO+Dta9k\\/VsNxgMO3lebF9SEPeJe0Sf9Pv1ZoqZFqIXVPS4Hmxepei7Fp35pW5gMbRysOsOJYG42dCjyZSz+X45j4kH1lfaU\\/G9yvg9Y0rdyuMFIrqMBWMP\\/K6kDKXJ3+PLmECCvG8dBfJXjI7u7f1PE4ixqBXOgFa8irp8AiTFLPanEYMLgqn710TzyPNfTp\\/zo8HCG10OsSFfUR\\/pH+WYgtK00kQihXwurW85LCsSVDFZSExwH71QF4gs9t0QtxbGMUPSOY\\/42PhB0ajsf35JeMJKBBPH84bnd\\/C4j2\\/\\/QIEM\\/d8SCJST1Lz81Vw+v1zfmkFYhtgpiYcixtyKo0uxxcBiaVMJUcQgkUEbY6kqIZdVoSoyVNkARVNh08QqAQU5WYFiMUAfVRLPEzRIFkGMvg+h4G8+m+PzBKuLKMil+R4S8kVNb4vFYhV7VEIZNxekZEmCJ6Uh7IMVMQRHoXXzuIN0\\/Aaj7vDQEUjbSFLsmrrSajV\\/NyvJdVVWA2wkOxoOwCKWXdAaNLosTTahIFSUDRVElTZNKpUCmVfUrzAiQ4aIjV1iORXDyTiKBTG+7kVPJIaU0YqhdFIfq6yurECTw4pjPCZYLRa2gzGAdacScVpQTt+ppkhrE8wXexBRRlDENHWXe9R6DO9mutB+Yb2lbRnGC0xYthipO2AtvfCdd\\/O4mUfkf0UgBiEQqzS3aM7fm1XVBQmK4M6XduFvg0XMaKzGXJ8ZteYiaoxZTKstQygYhj+UxLxJ9bDkUvqOJAcKRBuVijAo5DIZxBMxyLSEjES3RZck5wzIWk1ImKzY0taF5ro6+GQj4rkstlJgxXwRVlqeWMlBR49KrxsKrciqjM5E9FrNqKACiUngPn0TD1Gj8V20jgokToEY9N0d3i0QOwVieQ9OIUqBfIECufd\\/RCDDsTgcBdfHNZPpHpNFs9uFyrHRmmRGllrfNRLD\\/dti2Et\\/3x0MYMmRM2AYCmBCfBhXHDETZlVDIk90ZMjA5RxtpCSGfVWTPmcUUh6yloVKwoMpGXmTHVIxAwelpBToviR+h4y+l5qBDJOLCtVTQozt8I1tILeD2v1GMAbV4MTISBohJYXJriqY2dTBeAyBTBBNZR7MrS5Hk8WIemGtwoqRQ05sl6EZkA9nKIw4rZpCoHUXdVujhak5uO0WyFYbSlPAJP27sZli\\/EsnE7pQWX5F\\/n6GAlH\\/5QKxUAPzSuJsI8z\\/HUxqVmMmT6krSBoKDMSqHoTlJP18TkbKDGyNZ7BuRMOGiIIE21shJtFnE3CR2eVKEUc1VaHZbkM6nsK+SASGugoMD4ZQx7gyud5Dt0I3Q3fS3R3A1AoX2vwDeHRrB86cPwtHN9dBjaaJ3vJ6jMmwDaohB0uK7SjSiowO7CVj142ksGU4hiHJB1mNw0sk63PY4LbYIIUk9LWHIdVGsKDciZMqylGVzcAkZ2k0FIBJKIhJ92gmsYGSOrYfCi1bTCBL0QqNBA1GxrNcVoALIQxNbC8Nk92qT6Ap8Zbu+ee0lutLTuCfEsg9Y1u2lYpoRLXHWX3qzJaXIsno9FgqhmZfHbVTxu7eYWQZHHd29SIeDePMY4+CJZ+BOxGiq2CDairwfE8Yj3eGsYeuYcRmhSxmvaVSqKQ5ZwMBtEyYgBDjalc8jiAllw3lcNRUH4Y7O2BIJLGoxoqrj56ElnI3uujOtGQKTrF0MJmGQ6zZ4nNMjE2WvAj2GQoyByOBgUSmR4i+hggOMokiVvO5fxtJIEp3YzIbkEj2ob7BBaffhFx0GEtbyrGASlOVKcDrtmAgHEIfraulygenmkALFaZIixwmenzk+Y2YNrEKXpcZm9avx5kfOoWxS6MFqzqI8NhcMBvfZREizpzD48l\\/SiAHlrhWXLmqc\\/B+IwPssTOaENJScKsyPEYaOK1kJFtEbziCCe5qJEdCSLuNMLoccKcVVJFAoToxWsRz+8J4IiYzSFtQR42e7SHRkSD8UcLfSjeTPAO2dvahqdqBZG8\\/GaaiYKtBXVUZphopsf5WVNgLaOJnr0kmg8rgNoklcnQvqSLMtLbXBwbxel8\\/LL5qBIYSCFFz8wIgBNO0DA0TKVSnCPRUssb5s\\/G3rfsQNHp4vQVWUxoVagZT+czZNR7s7e5HBYHCwvpaojuVzM4xtikYzqjojeUw1eaFQhSomTRCboIsIkCxzkChJ7G47ZDNllFXVhBTk3NiF0Uqj4MAKPzovU8\\/fYFRkccgIXDrxRe9t0CCI0H9VQQzh81+m9lmu1HkBwIcvrF1px6cZk2agFYyv729CycvWgQllYREM8\\/TTaRSefgTA2SQS1+iM3NCFaoLosFmvDySxS3b++Esc+CjlXbUeaxQ4kXsCaVQS+TSpaWxrm+ACWEFEsxVhvI5dPf5oSVUVJjMWDytEdlcnswKw+O002UwgOcLtLoUUsjCbSygweeA3WFh7HGhO6ohQBe6L92PaJwxIm9iDDNiboOPSqXRAtOYUV5AgLRINgcKFjvvMyFO95Tn38eqnGhxmxCgkH02I8oo9LadnWiikFzVInRmYCwo+iFimSRWLjPOmTw2WoiA+EXyxIiXO+PoHAjCQ4Wa00jX6HBsJ7xfpkhitjngsUj\\/kIV8K5fMfD2Tyeoz6QsiuNGhCgiZp2k+09HHSgK4ePERmOmy4qGtW9Enp3HJ3MXw0Dj3MobsJDLc0t+DRRkTTmuZhLXhGB4f5vk++vP6MtjSMSypcfOVscBiQp1bQjWZuaojq99vc2ThdJsRSFkxTMSVo+tIKy4EMwaYFCO89Pc1cgJ1jDEBoX29tLi4CrenHBYqp43Xy8UsuotWhDPMghwuhKNET7RyRU1SIMOYEtmFiRMmQrH7kDc6qUwaYnBAs7jRkI8iMRJAdYVTr6PCrsAsFpxR6c6f04ByxtCiQIUEYmIZoSQXqbhRAjwDDOkUDCYJD28O4vm+PE5ZMQcLGaGbzXnYrB6RjL5FA1mqm4\\/h7wvkTOHrwkyusuksAyV0aYulpqqwQlZslLzojebxzOA+9JGZFrqoFm8ltg7twxFVJnykqRybdo9gPYUnub1wRpMMbglCTyeiBQfuHB4hKrKh1qJiJn3+arFdKAPmpXNaMBIYQaDIGCUzPvljaHEZUJHPIsvgr5LBRcaQdCwKhTlKgcJMENml+sOIBPuRjIrFNREkC1l9WZRUoOPIWKnFCZgEAKFL8U2cixXXfgV\\/fasfqUA7Cv3tkLIhVFaLLeQrkSCMzgoms61nHLsc5yyehQLjiUoXlKTmR8jDfqK1fsb\\/LQMptA1G6NZAsFGBORUWxtAcaqqrsLt\\/iGgxiyUzGlBF+O\\/Mp3TltjoJWmSxRBS\\/Jf+vNEnK+wqknsczPGYlkxFkSYBktjHJ0iCLSaBENlapgPXpOLIGM5oIJ7d3RdDJZ\\/rptkyMKx5C1X5\\/kAwoIhGNwGm3w+kpw5ubu9BDDZ4ztQUtFT78becW1DNYLq5m\\/MkkUF5hQBVh77auMBomtCBO7Uz07sKK2Y2YWtOMZCiBQX8APf0D6N7XjwH\\/EFa9\\/DJGmOOINZmFQgoymW5jvqHRvxs1g75lXURhvGObHYMBLDz6TNi\\/fgdWb9wMw4M\\/RbK7FW6fnZk7XRoFXV5eQ4BSwGB\\/iGDcieK8hSj\\/0NG45mPH4hLmUM4UcxSFbi0rciMDYmRfG112W4J5E8OFTNcYZNLqs2r48NQaTDcRJgsQQpvIErWJuOFxOfXF4GNdNceQ12vfTyBf5PFD8WaYIuz1x9FDv24kmrK7GRQZ6Jz0\\/Y4I8FDHW6iu9+KS6mYkYgXc1dXJDMEOr\\/DtghfMrHf4h9EVyWE4p8Dk86IYyMLlIwKzJ1ApfkGEgXgfEZIDtVhaw2ernXBEQzhl9jQsamlCinlPNhCHnxa1k9Y3yOvDBBF9bNMLL76AvKoiT2R3zjlnY8fmduzZ3gMtnSNIiMFgVwk\\/GStyRFJaBL4TPo65n7oTr29cB3fvVlQks4TEacT39eLcY5Yh2t+N3R27YKzxon1kENHOffApzG4IRFZ+9lrULZmO5slTUYhkMbnZhALdn5N\\/UYE5yPAuxqShKF0trbeBvD9q9kR46KZMmnD7ElGgUU8ufWOrJcfKr3lc\\/Z4CCYfDD\\/HlAnHeaaWW0WwJJZCiWb3ZH8Pze4bRnS6iJzaCqZqMFXU1sNSakXQYEAnF4MuSeJsb\\/kIRG9s6Ya6pYnxg0khnS5eLXZEiWkMFGFIMqLINLRYNUxrMeO5PD+OcSc34wsWniTSAbqsfajiKrp5B7AgH0RuMIBMIktF5hEMhrFu3Vt8yMxTwo2H6ZFTNn4HXnn8J\\/t3tYg2A3rFocBoZ88SE+omYe+xxqD73ajz52lbIr62GtXUN4FYQl6ow6ezzoM2cDZvHg4VeBVvv+Cla\\/3gvvIurcdpHL0Qm64XfVIdu0uu0F\\/GFc45HLJ3G1PpKmJIaUoTKQ0R04UQKBVrmqS1VmFAmNr3QRjN9kTyLxJHJskh44xRYachAluU3fT7fovcTiHBXHxJdcDITHBejlawW9JRGE7CPKCfAuBJN2fFoJIo\\/bduB4+VKLJ9eC0+LDcN7e3DmhFq6NVoXkdIuNrgjEEE\\/Y0jeyLjCQFo0FuENAX3M4EkFEcA+1BJ9xKu86B5IMllUYS6rQVpI0CygrcIgXNQ7FYvMYUSvrkLoazSKvqaCjm4MRGsVjiKcpgyTthhzBitCMeEiKJBiAMGwCWpgD6Rdz8HcLVZDNMPUWMRA1fnwRzJEp2nIknguk2AiQ\\/eUCdByZchaZULjDDXcBovq0NFZJB3E6TV0zXRbYbMJLZPr0ExLlOJBOCmcs2cRhTkkMcCyv2NV0RRdLmKn0XgiPrbppu6yOrxe7+T3E8gv+PIpcX7050tsBx1TEH1D\\/QULHu+I4sWte9BQ60EZ845MugAjffIZVTbUED0ME0oOhYt4tMOPRzoHkB12oZiggJlhm0T3h9VKoEBtNoofP2LQZpKWZ0BXeMjMemVahEkVAZUIRvQ\\/kfCsnNc3Km9pqEQ1\\/XGKCtOeFz\\/8xgCfZjv1Ja85KKEAFLpMhMjwWBgFPkdhm0xkooFxUSF90UyEDoDw21dBl1pFj2AjChPr4\\/IwKEnkOuLMxJmdSxG4WG+uax+yJhvsdW54mGuoDOQtNeX41MQWFOJdWDihHNOZhymKjIOV0hqGcTxdRYGc9H4C+QhfHuV5g1g7M34lx9tFPCiMTESlKypDq5rFuliAuD8Di+aCZqjA8Z4C3tjwBG7dQFPwHkcmqbAmQ0RodGlej54oyQ4HJFqhJhbPCgIKeb1jUfhXA63BYTXrmyqILW\\/yTBSdzGdm1tox30Wr6N+H\\/l2tyBE6F+hO9\\/UMYWTreqT8PTB4y+BY\\/CHsk1sYdBkD3FYKsYCiWPPKV+ETBXK0ig7Jjh1IFIyQKydBH+\\/KpmAuhGkNUSRdNhiYPzkKNgrEgriVzpA5FAjNjXTNcnAPPjSPtB49C5t39eG4MiMuaDHRNfM7swM4CIIVvBQjpaVFkRTKV+mybntPgfCziRf9nm\\/PF4ulSt3I7xgihehspKa5nWS+SIxUvYOxL6XisT0DeG0ohdzWN9HZ3snY0gi0tmNqcxaVTXWoN1jhJvqqq2\\/E5s1voa97H31qcqxX1UzNciFFhsVcXqhVjQhYyzFi9EILDsLX8xrmEJV50mHmBLRGkQlX1sFZ7oU71oeR7kEcu+I0bIcJD+2NoluM+jprIVtysIhNjWi9SoxIjKChGBtClhaUc\\/loFcysmYlrGbabyFKL08fn+HSJ1sy8QR8EU5mnzJ0LeVI1vAQUySdvhzNmQPPK65AmYrz6pInYs3cXrlk6BxPp1tOZzEHHU0SXvlDy0Y2VMES+zuZ1Q++HskQR49fbKJDKzHs8OEettDtpumKPXj1wMXmkXIRL6BhJ4olfP4IHt6xHdvJ8mFY9BalvLfI1s2EomHDckqlomDgF9\\/zmNzoet1iZWdPKCpI6is5CObotJ+xnfxF9vqmYMPQivrp8ArzOBtzynW+haeosRFQJSYKCtn0jmLtwIYzMP1xT52JL3oM9xQoy0gPJoKLOnsMc4wBef+A+WIkKi7EI8t4myItPQ8Rai2In45hEyIyQ6CgjoqKbzJoZA13wqGHEmcFHXRVwLl2CmhoXQqv+hPjaZ2AZ3MYU0ILJn7wV8875BFpo9POZUx1V5YDXJJYUZt5zgKu0tzF5fxGPh\\/7R33OeT4G8QYGYDvrgokLEQZMWgRcF\\/We4NdmAJDH4mb\\/bhE6bEeF1f2XjKlHpMGPfXd9mgpeCtbaesnNhgBl8NZOncHhEXwwnsn9Dke4skkb5gsVQT7sGO1s3Q11zPypSDLaGWqTMMjJMMovMaXzzlsA2ZS6GKGCjo0Lvr1LT1OyCGCagNRDtmLPM1Hu3wb7uPsQCHbAZR\\/OBMC0FYnOPo09DP8FBkUIwpegFspK+3X2R8NzY0IB8ZTVsZdVYOH0icv3D2PzH+1Gf7cMES5pxw4FHnn8dE069GOd\\/7vOY4ZVwZKUVlYxxyWQG2XwR7yGPkkC+wbffPvC79+1cTKfT05PJ5BuUoOvA72Q23GYx6z2nIqQUaCViWeSdv\\/41Hnx2L5KLPoq2jAl2+t0kNcfLyyo9UXizMdQy7\\/D7e3U3ZbDYAMLkvMEJxZhG1FmNjsQ8uFJB2A0RBIw2uib6\\/\\/QIvSKtEnn4aEluNQerqJPZeiSVRTuZqhJ6il\\/9UJiwuRjULd0bEN74DNzZoJ61m+0WZJmFN02aChPrbd3ZBfecq9Evutcn10OZ3MjwItGtmphHGOEKbEPHWxvQsXkjY0aQLi3I7zM45vglsMpl6ItouOS6z+Kk5Qvh0XIoM42OmSSYqWez+YMKRAxbOxyOz1PJ7zwYzw8WQ97+cvSJYl\\/xF3h+2TtcFqWQTKdQzCRhkEYHaCxWN\\/7ry1\\/DX375fZiWfBL9Kz5P5u3Bt2fZUVnp1MdMWqjdRqIlMf5tJsLa2TuM3YE0brvrXgwZ6iB7qmCW40g4y2FzWdASfAtY9zJyYm+S3Ah9vEA9rJcWJXoRxDCQySAW7pbBNvsYDLtnICV79BX8VXufQ2W+Gxv39uHjn7gU29\\/YDv\\/eflx08YX405MPoWrqJOyY+wm9\\/dKe7ci0boGVrk\\/KhMg4arhxdM+tXJ4wmgloKlmA29OIT37qBkQSfdjWtgufuPIafPjkYwkQEvqa3TRVxudm5m+Q3gWGxG\\/eFQqFE1VVXT\\/+vABP\\/5CFHFDEqs4\\/QO9QHxXc+LFjEaQETN60aRNu+urX0MFgLTl8FKcLc+fNRTMDX53ThKr6CfCUV8HrMMHFGBRNZ9A9ksKXv\\/19ujIPDJ5mxInCyp2EwW3rkG7fSGRWECAWpsJoQBQERIlUxOicGEoNj1BYzJoTigVKZQPcZRXIJ8KYWGbDmSctx8Zt23DGmWdi165dmDVrFrbys\\/htkocfeUTvAMyJPR9pJXnGpbRK8qw+ePmchqkzmPlvQn6kF+nIIGiCcHt9aGhhXGuowvy5s3HJykvg85VhdAcJbfza+gP5J2asXP73mPxBZi4KiHajuE\\/MTxJBXwQlMWlNMKuzsxMnn7ECScGwDBvIREkkQ6rC\\/EERK8DZUNFlTddjYCImiV5kkT+Jpe1F8RuRQMxMoGA2wkP0oxAv9DPOGClsLxl15LIjddg4bdo0DA4O4tlnn4XNQbQnW5AkEmMUgq\\/Mi3g6h0A4jsmz5mMWk7y5c+boS4qF4oj7kqkktm\\/dhmQoDFWjNoshWeYXsNLZ0WWJbTkkukOXkRYo5REd6EZe\\/LAHnUFNTQ2qqyoxj6jrpptu0ifljd\\/j4wCBvMbjozwC\\/whzP\\/BUUmLoGxKJxK0UhKG0CY+YAGAkZO3uG8K1n\\/08k8QUTDYLFi5YiJrKKvT09aGQSqCmogIKtTzATF38ILrIttNkUJb5gCrmdCV7idjyTAnMyGUMCAz0UIOzYrrI\\/pkgok7BCDH7Q8wcCidiiJK5Wn5UyIuPXIpqwuznn3kWy486Tt+68owzTsdHzvqIriBnnX22vg9Cku0RPcB51qtvRZNLoUBwIKna6OJ00mXk8xtamnH0scvxkY+eg6VHLoFTjH7SQoWHKLWnJBDhKSj4J9jWK+g9gv8MXz+wQIRFiHsZpBbw9W4eR4yHb6LsaW\\/Hzh3bse711\\/GnR\\/+IaDgCBzPrHHG6vhBeMegIS1HETkUmggQH\\/XSW8SGDsnIfHE43rzHyXBzDw0NQ8wWxLaHuXiwUhPg5d9FrKgaqRM0xsS1nhhk7M2Ev3d7MmdOxdetWXH31NfjeD76H2po6fJLvX1j1Avbu3YtEPIFkYkTX5hyzfafLjUaiq\\/nz52P+vHmYPW8+Jk+eQlTkQJzXalS4ApPX0WlAtoOxRTD\\/Rirqb4SA3utnN\\/7dAtEtY+xHTk7ZvXv3tzs6Oha3tbUhEAjoGiSmbYp4I1yc2FFAXC\\/Ol3bkUPUe27weFPXuHzF7UJH1HTdGN7oQ2boyLkiOxqySAujTbQqj4\\/+iPeKzQFNiF80FCxbg6KOPpoB8WLXqRWzcuEl3KXPpbsT+EkcuW4ympiZ97wnhisT9pami4n1J88WzRX0HmZc1gtHfuL6Lh76VlJjTdUgIRAignVYxlkw2kMnXRiKRy\\/i5QjRSbNUrBCPei2tK00kFA0SvwGhMGmVG6Sh1MYj6xFH6sZh3TmKTdKGJMt59CMZVVlagoaFRjzmzZ8\\/G9OnT9W0lKirKcaBFl+4X9Yh2je+hKNXJ7zQ+90m6pR\\/x9JqD8eaQE4hgrCBA+FLz6OaCYm\\/yCjbwLBIlstNlZLJ57De\\/xpg96g7ECFvJpeXzOR29lKablpgippCazRbd1Qi3JfbAsVodpe1edGaIZ5a2Myv9crK4tyQs8Tp+A7qSMPZvCJxMlr5vZRsf4zMeZDt2izrH7ft80HLIC0Q0TvzupZjBV9rIRNxDtCSmDc7G6NZLJ2J00y4xYqkz2W63vWf9\\/+LZ72JdxDZeu45Ce5n3vUG3Fi1dK1CdqKtE73+yQN7z+eOWI5TzqMVo\\/5rYfbiah3CBXjJJ9CDYWLeF9Ql1FqaU4+c06xG\\/cRXh+5GxzrseHuKXXgfJ5AEKpHBgnQdbH\\/J\\/RiCHy7+nHBbIIVYOC+QQK4cFcoiVwwI5xMphgRxi5bBADrFyWCCHWDkskEOs\\/D8+dm05nIZzDAAAAABJRU5ErkJggg==";
//        String na="iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAAEH5aXCAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN\\/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz\\/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH\\/w\\/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA\\/g88wAAKCRFRHgg\\/P9eM4Ors7ONo62Dl8t6r8G\\/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt\\/qIl7gRoXgugdfeLZrIPQLUAoOnaV\\/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl\\/AV\\/1s+X48\\/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H\\/LcL\\/\\/wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93\\/+8\\/\\/UegJQCAZkmScQAAXkQkLlTKsz\\/HCAAARKCBKrBBG\\/TBGCzABhzBBdzBC\\/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD\\/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q\\/pH5Z\\/YkGWcNMw09DpFGgsV\\/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY\\/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4\\/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L\\/1U\\/W36p\\/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N\\/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26\\/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE\\/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV\\/MN8C3yLfLT8Nvnl+F30N\\/I\\/9k\\/3r\\/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt\\/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi\\/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a\\/zYnKOZarnivN7cyzytuQN5zvn\\/\\/tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO\\/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3\\/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA\\/0HIw6217nU1R3SPVRSj9Yr60cOxx++\\/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3\\/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX\\/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8\\/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb\\/1tWeOT3dvfN6b\\/fF9\\/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR\\/cGhYPP\\/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF\\/6i\\/suuFxYvfvjV69fO0ZjRoZfyl5O\\/bXyl\\/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o\\/2j5sfVT0Kf7kxmTk\\/8EA5jz\\/GMzLdsAAE9ZSURBVHja7b0HnFXV1Qf6P7e36b3PMAxl6CCIghQb2HvvxhI1iSWxJWossWuixoKJGpVorLESKwoI0vvQBoZhep+5c3s\\/77\\/OPYMiaCAx38v33nf5He7c0\\/Zefa29115bUVUVF98wFfJ5MTxG+0ZmJtDRAZhM2nHj6I\\/QWVOI1EGN2mVlvx4a+bGyvW57IsWSr3z\\/QwUFWHrXXepGgwFpsRhy+OCiM8ux3Nax90OPhocCqze1PrhiRcH0tEzscPdgxLBhGOXxYH1PD357HPZ+yOFywG35XL3rdhVNeXkYVFyME1evxuMuFw4aPx4pM2cq4P27H4qE1GMjSvu8ru5u3LDYBRu\\/BWxLJIIN\\/L6utBRtjY2Y9N57ivYQFK1VPAaoJgGJR7bRiLp4HMelpGC+14s8nuuw23HuSy8lHwrxoYb8fNXLbtxVV4dUnrs1OxvrzGYY+\\/tRGw7j6owMbCFsz9wei2gPrSOWYpmZ6us8eUk0ipf58LHBIGr5UDSRgJfH8Tx+cVaaUjXBlYTpovsVdextBnTywhns1ktE8dIzwvh4xtOjTpt\\/00ZXbhiDqwszatf1u0srU5IPXXB7YeCC37XZO9jNFVYrzjKYcOdJDhSO6UW8PxtWixMp2fEk4MS69tDUMx34XDnhyk1vvDFn+JAhf7j14vyO5ctWPjB8KsLNm4w2u8OqjppYpD+Ebx76Ku08EI\\/of\\/553P\\/wbPT3BhHyxaEYAGNOHXIK7dj90EXXT9H+eCoyEk7VCBDNIGpjW7ci5vOh9dRD8UfrWzAYVUTC6v498ID5MbVreypcqSZl3w84nXjh2WdVQyCAyUSKn8ejN+airzvwzQMGswEvuIfjw5dfVv18yETqt\\/f1YQivzSOsd1SNwHGjdnzzgIkPqIXL1Jk3G4mNBBooApWkUVd+PsxNTRhJwk659dZvHgiYtqlqMBU3P9WELWoUDaRNLlll8qRJ8Le1oWTwYBRff71dUXV0NZhM6ip2JcVmg4Ws0sK3n37qqXAvXYoPmptxBuUnUlYGJcibP+LhGz5cnbJjB9YTwHqyfAXPvUo4MvjwZHYvxBf1\\/O5QKHf9uhD597Wqx5Nrl1JGWiwWBPhANW+oY7\\/zx\\/F7UReuv+QSz8WZH6QpZ1xfrF79VCfW8qY6vv1QonQo8f\\/wbxXY4uVY+3ULJp0aRYVjgrJ20y4ox1+Vjl8\\/51cTbPYZvvEQPvjUNAMyqVDUhGm202n7uHySH\\/ZEcVLuT7g6He8\\/2Yv1BoOaP3lyU\\/qyZaXHX5immq0KSrLHKL2RTUSzVa0amfWtB\\/7QAfWaazQxDv\\/5z7j1d0dh27Ydz+ZkFV4ZMG5D0SDqAIdxb8U38NnNJgMfYZecHKLSB\\/j9iJGQpooKhDZuhG3cOOyssOOZlL8jFknAaEmU76zxPV46xHnSHmJxQI2EQtg2Z47aTsm2UMpLMjIaIilpZW9cGcGmsBsJTyGiSj8Salw5oEY2Pf20usbhwMFs4Esyzgyy5XJCQ7FEKRvf2tWF2fy7hiTPJZHM5xyOa2NLfrgR4XmLzQyH1YJf\\/GGV+iUZ64iqKnxRW4tjTzsLj77yEjqp2H5KEXXTnjyXlobp1Ignkb9ep9KbTpafcMklP9yIYoqc7VZW\\/62nJYFACLh7ng1j+PA8om1UYSHe6ezET6qr0bhhAzYQsiA1q4nXp0yZgpFuNzaxM1MfeywXFRVdu63DJb88bHcD3YkmHL\\/ZcvwZ7owPFK8PXis17LoamHmtjyhbTpSdQwZ\\/WHQ9\\/76G38+RPmfyewv5eBzv+5i\\/x1KRHnnRuXAccYRuTSZM2N3ImpYWdSlRkM7eNZOwZrLokTz\\/Ce8r5PebPKqIexNxfzjR8h7vaeLfVby\\/lFphBK+PonAvIbRbHh6EHnMo2UjYmCTya4mE2k50eEnIVoJ\\/PM+1pKYiTJospcRNZM9\\/UlmJG7dv1wjt5DGB9u8fVDXg\\/TX8fSTfNfnII9H\\/ySe47dd5yMy2Jhv52e+rUFzYPj\\/tHN\\/hm3nj5XywnoYzjy\\/+G6\\/\\/lLR4nt8Tee3Qymo0ddVjS9SMNEQRmjUU75f1oVSN4fw\\/tiKL95XQ4E595VwUlNiRXWBP0uTcXxe819ofOfHZOW7EDjkEy9evxyTqaJHmdF5\\/nt9lmVn4TVUn8lINSC9IYNSh6aHWzRab3xdFT0cIOaVxFA1X4VTKyVUJDTORcJwiFk82cuI1GejtCmNB4rih8+Z9uLWJEMjFEfxuJGtm8QH7iBz8pszDB2PIyDOjsDoKp3+S0t639ZdWu+mRno4gSkbEkZNeouA7nz0aWfxXd1If8SNaXCEE7ueeg10MyCPHIMaetfRtVLeudmPshOF3GVXHnU3dG5CebUFqpgUpGRbY7Ebs1ciADdmtQfj6ueGxe54j12ymFR511VUQvgchjDU0wEAhNEydihsNDyJGyBNhC9y78qyp5c3h\\/1gjasSE5pY2tbg0R\\/mPNBJK9D7f2+O+1F2Xj6xCuHib\\/19uJBqLXbLx9ddf8FJ2cigb5VdcQf3ViFuO\\/BTt2xPwtzhQUOb8LXtz9wE1olKia\\/70J6SWlweWd3TY3eymgSrETGkfSqiESTSmHT8Yc0cF0Zse2OB1DzjY+9FIwmQa8fmzz9Zspd7KI0RHZ2VhJ1++qaVFU\\/W0MJhKKZ\\/P7zH8zmfjN\\/88a1t\\/d2jY9zYiH4fdjKe7h2qMvOH559Wv2YCfTq2T6qaIPsUu6iWh7DHUUfn8\\/UFNDYaz8VX0b6t5\\/tqzjKcYA+q7P9gIhYv8bsGjzRVY8pcX1Y+JrhlEy2gaqyV0vf\\/a24uDqRzPFKlmB6IU2BpCd8qMGVhCL2jG+ef\\/3GSxPPlPGzHa\\/T\\/3GTY9UZQgBz3kx5FEVQGNkgQHm2iGBeH38ThBSMEjf\\/ZsOL\\/4Asv490FDhqD01FOVH2xEKVuidtbaEaEv9viKCryzow4Hk5Oa2NtD2dBfiPfJvE+c4WbSYQTPm3JzkUkTsY7Xpx51VDz3nHNMIIr32UjWQWvU+iXZ\\/MuAUCCO2l0teHSJCcPZyGU0Rn\\/gg2\\/RX72FL32vtRUR3vkqj4dp63fQxUtlIysJ9eX0MgsefTTpQ33X9MajHvzhi7iqSu+Ib+\\/W7ej0e5BOe76Ldn4B3aC7770XN955J\\/IIUQ5N7htLluDlmTOxa9Uq5LEzHxO6Ibw2\\/bXX9ODsO6jqdbleqfX5zl3Mv4UHW3W0iCY+jDHlfNrwNgriRZddhviCBQiQ09JpHv5OIyXdFsv4Go9ZhGjaK6\\/ojYwXq\\/yNqvnrmjVqmKbUL6EVfx\\/Om+vYK\\/n7KJ6fR9PbSG4bSYtZz16L9x6lwzdUei+OBr+Fd49kHPP642XpkX5XvxLliZhGAcayZvPY7WbzWgvxvpIycSJd6YeI9zup8v\\/BBgbxJbm8jw4M5lI+5JPJDoyShqQB4TJ6MbX19agmtLfeaESOc2i+Ul9pQ0F9BGSkI+YmEp9fwfDgmhUrUMAelfHBJnomp5OQj\\/FFwlEreUgAcDUPMdUziMIPaeOPT0\\/HE0TlT9kZuZ731AO4bsfDz5UPS7lcue2tQpx5eivcRqMWYvQSHX3s3ZlE11be\\/BKP2\\/lgAxs9jVK9noLYSS7r4bkSclRPVy8cRHeNz41jeb6EnXHNfVY5Z8GNyCt1IpdRn9aIp8VmuPD6xvjCRAw2xiuFDNxETx\\/G3r1AKEoIzXyCfyFxP+9BM864HfBG7fCYQ7j7YAYUI+z4e9\\/paHr9ZVQ+9VSvoawia\\/Y7Z3\\/TyOHnpXrLxsD165t8WGmz4DW6PYIWMyHaRc4QVEls1E639LaADz+7gv7vdEvYvLpSWd\\/ZYEl4VGTk0z3KCSIt24xMR5mSYcrAwsXbvmnk4nvy4KfufuLRTuw0GdFKrqgmqoS4Rgm2CL7gOCudaDvECaMjhMKhKlq32A8pqnAu7W4PIjc7D3HXDnoxBjXVWGGAzq9dHX7kFTuSIVOcL53SpqiFHwcxLBpBP295hQ1kUCkm+D2N0D14uBGheAIp6fS3CiI4aNjJ5l2dy6NedwQt9V4Uj4jSz0p\\/3mpIu+zbcmcyK8moSWWzO+vcePYzo7qDaOonmuLCnvS9ZBCklBr35uPoWHuiGDy0GP3hXaguOdq8sW5xrLg8Te1pD9FbMaGwNC2PL+vcSxfubqSW3vinKjqnTHlvxcqVJxZR0MZdcIESfOWVWf84f\\/Qncwx1qho3oK3RgzIKREnKDKXb0wjF1g+LxXhxV2vwL2MOyxxhNaRu\\/qeNqLfcAoX8rjkM5Kj43Ll494KxWDYiD\\/1e\\/7UbN61+rGJiELbeqUSkQtRu0WLD1AwrrDYjzYQB\\/1YjIXqPkSDlYPRytXvFBE0X+YybYXdYfriRfQVB3\\/2I3Z8TGbVnHLnXTfR7yYlGaoCNv\\/sdRl13HUD2B8+BghzbtQsmanH5HaN\\/EKNQWxjcGiiLGDkSO\\/11DG7f0hRcLE5lFzdCwk57ihldXT1XpLhcf49G1O7va\\/6\\/F5CYGf5Iz9xI3Hd+sC0fgYA\\/UTzYaVTVfTf\\/PwZIorkZBsZo3rq6pw0dHfNNNtvbFhpoRQwGAdkRqMOjphfvMDg67lJjFgTcRnh6gzCrmehqiZClzEjPsRxOfvzy\\/xVA6j\\/4QK2lsbERGDdtQ5yiZWCbEkrbqcsc\\/DtV7AuvC7qt\\/E4zO2FIRNF10TRcsuUjlFamwe4yiTB+6OsPn\\/AfBSQUDN5TO3fubW0ExmEw\\/GbkrFmXr5o\\/v7yfHesWz5LmXKW3E+TfUbbZTyBj\\/HsDTbzoxpE0dtkEaDP9CQ1I3pNtscJA+5WXno1LLqIpsRl2tjf7KpV9tL9fgAhb\\/jxejoOidAaVxB7XEkbj8F1\\/\\/OPmZnaglZ1pJ8YzaaGzKAdtBOKi44\\/D14vWMWQKYQudS7Eo8hG9o+hHZV4e0ujeGQhINn2Wh4iMMlJvGN\\/p5P1CsUGjJuD0qds+CHRETvyXKSIfGTMymtg8vzOMFjzQVKEB1blqVefOjRtzGmjaOmXIne+7gkZ6HQOIMQQsTiq0sDMtNHn9jAW2811ptFY5vFcGaM8ePx530B99jBSaR9dFqHMoLVcxz7+4ejVKCVAK7xtWWoG7x4VNNtUQ\\/1EAMdIBMJvJzwYz4ubouJGevt9W\\/27tSVtddqwhG4gHKFMBHQRiMjss8yMhduQNaqnRfM+Vkydj+bJlmExP\\/fe0IbMJ3HwK\\/PklJQhv2YLu8nLU0CucznuLec4vo3WbNyOdVBp+7LHu9KFDM\\/5tQBTVkhnPWdHl9wUM0YCZKjEEk2LF2X3DYH97K7YS+2fR0HURkPU024NlkI0dTmeI8RY7UkAgR\\/F3gOzTR4osI6VsbH86VfAiUuRiAiZu11XTp+O5hQtxLP\\/OHDsWXxDAXBnnHD4cZXQFwPdqx4ECklCCl5rK1j7fU2+DzxNC0KvSFbOCGkSj0LRoLo77shvbZNCc8rGSHW3ne1\\/l7zn01c2kxkNs2M7OPnDGGXj1zTchXrpRlz8ZGvHwuoeI8JOqh5JCgw49FBFGIbmMRproyHqIjAgjxdKPP0bVK6+cyuDtHXzLqCTncK7\\/fkB8av1pnU2BhxJKeJA\\/ruKYHhu8PQGssEdwlJqF19EDW7oVn\\/UNgaGrD0Z2wkQef3zDBhkoRz5Z7EoCJLMDj5AixTzXR2rdR0F+Q492AjxfREq9RGUg4daDxPwLpEIVZa2Cz0XIXjIomdXTg3OPPQarP\\/8aU575\\/Uakpo7eA5DVVdn7BEJlA+N29iJWNgi9eTmqZ2cTbB3NGgZF21gFk3Tzi6h1\\/rJzpxb5mPTzVTy3kB37hFg+h2w1hB2fT2xf9NvfYtv8+XiCguzhfSvZ0RcZqmWNGYOOxYsx5ogjsHr5clLdq4UTEmnl8MgYNQrPUVaq+Z48vm8o2S\\/7ssuUAaokh2lnzfpeitCjv6du0aLbllHryNjJITLaSqy6pcMENIu8O58vzuTvXiRHVSV4dfGYwkbv4b1H8e81MoXEQ4ygIEFUTz6vVWVmYl5\\/P44m9u8j+1TyfKXOcrnfAqRiwgQ8TOCriRhxmyffeHOsZ1yRWd7VwqArCcj0o6lW97QPSHY49c2PP+6XMYCj+Hs1v\\/PYGaHIX3k06BQYRYCOIQu1sIH1\\/J3K3zKZKeplFjt6MzsoQ00inhlku4USKBCIKXznF0RCD99p4LOF1HJiM+TIIMACQCHfVZGWhr+QckVsI4fXikJhPHivCyZDKJyfPtTm7zMnAYkpdOq+pQTkz6+AUztU9e0ZJPk2vvQdknUCjVYrX5RG6mTyu5MYH0J\\/6a26OlxHvjbU1OAmdkx0fxnfm8NjPPk7zg4HeM7Lzj5OS34r39\\/MQ0KXbLJVJ9lIrovrIhQTqp7K3+\\/y9ziRLwFq2jRsXrIE2fy72JWGs08l4hmGRUIJTDwiJ0MD5NYPinDHia0I6SqtSVHWrozHxwoPD6YQjmGHl9DAzeFRynMz+HIBRFipjRi7lFj+OTv5K\\/6eS9VbyL\\/Fb8qTgzK0yOdDLs+n8T39vEfiQSOfF2AyysrwdUMDBlttOCgrUzv\\/FmVrF6+l8TiNVHDyXDoRioxM9J49q+eqNXffn+60P+pMM8PhNMGVplPk9reL0Ndox6wFfZj9fu\\/4xUbj6lo+LDKxiccI8qVQwSHTFTwvnREZkamNtwlIjCxxPs\\/v4Lt2kNcbyUozee8pNH5euiodDS3otxioAVUccfrpMJWXYe4jj0IhAuge4rdTAqgYrGKaPwczPjYg3NutOZMOYj+FhyCl9L33zvZHfK+f+PefweyIMyC2wJH6HUCueyn1A2dmdGQ8ES6fNUdB+ucG7GAnW8km0mkZhZIRjOsuuACN27drfO6hrXhw2zYEiOWbSAEPMf427USU3608dwmpIBj94DgTtjPQSx2UwBVXWxAOBLVxtzhFvnjQUNw2sRd1fW6UlRciZNoFm5Pim6biDOuxGJM7ApWW6qvt5oxnaHkpkBZMnXs6XC7jvgG5\\/IHiyraG4A5PbwjdfhUL5wWxix3vlmEZspGMNI6jzl9A7ItwR2TugeeP5reDlBLjJ2xYXlyMD7q7MYn3n8n7jz3ZQoFLwOpQkZZtQnqeESXZY3+9ekXNyXa7ZVKCesbTG0YknEA4SE9gRDb8sVZ2zAaDJYIMktwSGGRSFHW3fyXzHq0NPm1CZS9Azr41FwkaO5vN4vX7Y66f\\/7UPrl7GDGzImFBQ+Kub8PUfHpShbU0tmvlMEan1IDucwReLcObyXIGczy3EpdVtlAczCvLzsau+kVimOs4wILvIhoxSegY7qOdcnWosmmAMo8LbF0EwEGMfgJR8P9Jy6M\\/RGGXkGTus0dJ8FfsOCyVVxEvvQsZdds\\/6JA0gIGMiBRn2T+96zn1Us9WCbvGbaMgCavJ1EitUUoA7ifEeApZJtsohUOmigXgUF5Tg\\/IM6YAwkNFuVk5uF9rYOOHlDThFlrThIlXqcbdXGr8LkwFsKy1Pu9\\/dHEQrF4aeit1ldsKT3wZ4VQpa98pREyPku9uOzFyB9nWH0eYPYlHshAl98cfKK9vZ3POyw+EVdZKcBYAZRbaoEQlJtUqiWy7Ky\\/K0lhkcfnRK4w98e1jAs2A76onSLMuCPdiEr34icclLHd7giZmpT\\/RLaAgNSs2yZJoNxJzGcFvDxubAFlrw2DK6oIvHV2L8OiJuAfEizR5Spl19OVGcj0dc3RolGHYrNtoZ8GlZJEYXy0ffXv2rGTwZ5510wFsvHFCAaio1v6ty0mlqeTmYU3W0BlFcWIm7pRFZ2ep3RWzVYMCLjSXXtK5GR40i6PA6jNo9nMBoObdzmfTEvP\\/sjpzX\\/2h8PEHq0oMMmaEyIFSYW5bnvA0SNJRCTgwYrGlHh7u96blPN5p\\/MvERB38pDM4zmhDvZPCkW8SBua9sNSHLcygSL1aAJ9r7GsP5fAUTmeSMhsosaQSJqGp1QExv26ADtSNi2Vfv+twDZ14TPHh+yQJrJjMcDI5I\\/9rquZ5rJ7Ctlpod2xk5WdFFjaR9JCCFCwowtrIcfrjmLam2txq7GkSOpplKgmOy4wXkfNbUFAywXpuvhbcznO83IGd5iD4ViQUXZdxf\\/+Iv6\\/2JAggnaCAcM1iBqvu7fWjrUNez7uvjktf\\/lgDjtLrR7autql1gGHXxUlots6d9XFx+7etd\\/JyAGxYBQMDq139++yOMOKb31KRg8OvV8s9Xwyr66OOdXjf9dgBgTViqHyMyYpfN16ruc3iaq4mgGZBomJc36rjPFeMq+ujj3nrb\\/IUDoHUc++gjmo4+udH\\/99c9dLtd9xuLiTqW6mtbRpQFylfO36ca4ty3oj9pkfiYaVtHfTruSKIE\\/2A9nitlttKj7HAr6230d\\/wOAmEzGpg8\\/jPlbWmKMBE1RGeOVMV+6NRkuV19KUVGvMnJkZWjVBnSeW4Un0xYgEo\\/CTSfSHkrHtrVeFJWninsTDfgiln118a1Hu\\/6zgNC2nL\\/0mWfm+uj2p7LzMmgnGtQkg9USb+gxh4uHuD9GPp+ZkQ2Dx4vyiVNw0YxWNGxvREGpC2aLAp83wv81k7XH5\\/2nen9cQOS7e8sW2GhATenpt9W9+OI9tZQPyYbz874EOyzjuxIFSlgr05SS2Sy0kzh9B++VATsr78tSTDj1ZBVzHDNxd8oyFGQ50d7sy+Ijvd\\/twkd\\/dv9IgLAzzZ9+Gq2vrTV5LBbPIdOnV7R99llPIynRRu+5QJJWGdJ62VkJqvzEfJh\\/72QkKbmqDvZuJIGVAetNfEaAsfN6iSMFQU8fQucejQfKyHrNvjx2Ya9ZyvlzvT8CIPz0bNnSsG3x4lJJ4exgh2aMGIGetWsh1BgZCKCAQPQK2xGgpt5ebXBDDkmqaKKbI6yWy+dG8PtjHsU8Lyzn1Nkul8rgV79JQ9NmtwzQeL\\/b\\/oJXffsHiGI24C9+GdD5zkA439q1YkV\\/y6pVqS3EZAux386On19RgeUMhUcPH478IcNR+8Vn6JJIsr8\\/+ZgOiKAlmxqtOC+PvpiKLLcbuzweLbSWAb1cvl9G4l1UDAtunIBXd26iidkrLwSL3wjsHyAyCh+nvjghkovT+nPZkyRAqtmcsuuppzwyN9Ik1GDDGxmEXT9oENZ0dKBEpuoVCyocZmzt7ERMHxWUAOMgxjMKASgh9m1eLxbU1yOX7zmEwF+3fr02MDeZ12QEJYXst\\/3KSZHHOtdZlX04XEvfDu0\\/IDIabzApBMiAX3QVYGTIKQlvWVufeqp7F6nRSGr0SvYQO+LdvBmd\\/H0khb6ZLCV5n830nnv4ui087snJwU0+H35D7dbFaHP7rl0oJMVEfmSU8tjSUnTk5mLxxo3aUgcBpOPkgz7\\/yth91L64+9G3dh44IGaJ2\\/l9tDcDJ3RlzF7\\/\\/LMf7SJ7NLPjQpkzKQOS+y45cDNmHY1Fy1ejLRzAp2QrUTc30prP27YND5BqG\\/ktyaxHDR2K8NatWEQWEkNxhMhPZSXWtrfTpsS19SfVhx2GrOpqBYnE3n18+ul\\/DRADtZTZZLaFXV2\\/uODBLbc1dEdTGknyKcOGwbBhA9pkxYzkmmZmS\\/oUVlPIt5DlJvF108hO3fwto5dFlKccIuGvpNhBxcWYwO9lZEEnKXA0hT\\/jiCPw2mefYRARlC5pEjffnM\\/3duzVx4ceOkBAzAp1v7EykramJhx32xIRE\\/zGKG5\\/ogQfdXfgfALSSrbqlXFgsspBRUWoC4dRRrZaQvk4mr7Wti++QIRUeI8d28nXy4TgV0TC1aRA244duISdf3LBAhxJRBSQUkspOw7ek0rgJt555ymkyN6DEXfddSCAGBEzdr0USd10YaCHTmAwxjCWUaDVhIefT8XCRAinlZejmw6hpPTtIjscTexvJeb9BEQSsH95yil4\\/513NAP4HoGVlQky+G3itS2yOIe\\/S2T0cfBgZG3ahCLK0iqypEVGJYiQSY88cgwB+VhbI\\/Vtob\\/uuv0DxGAgO2XvqPFFW0b4e6wI+KKIhRUNkAJzBn7xai9q6fxNIN87amqwWE8wOpKebb0k4FFuPMTwmaTIkvnztSmIVBF8sqgMy5bItBo79qHM4PL3r84+G2++9hoOS0vDFgKQkLl4fo+9\\/vo\\/Wqqrf6EtQTCbv+njscf+c0AScTisZVv8\\/X0++Citvn4BgnF2IA6704YuTwivf52OpmgI\\/WxgWlMTPkMyDzWV2K3MzERbV5eWqXbp0UfDR0O5URIIkLQnooolWjqppAQX81lJxrzluOPw0rx5OIGApB9zDBa+\\/TaGjx+PD5cvx3mnnRZMvfBCh0aV\\/QVEdHZq9cYwqWDpaTJAYbxgNBroYsdIJTO6OvvQ3+fBbf5BSFlTr2mlmenp+KK7Gwv5d9zhwM38bWbHH6HARonVe8k2WygLIh8yViYWqY\\/HRFr\\/uxsaMEMAOfFE\\/PH993Eezy1vbtbcldTzzkPP3\\/6GQlJt9PPPr2U8M353R3m\\/cuF1P0ARVUlt6951vz\\/YdzXDTMSiMZzc6MDaWD9WlACP1GbgrmFeXBYtxQX1NJqRMKy0AZvWrMGfqZkUaqRqWTuQkYH1NHoyiys+1tVkN5Nk5CFp4WedeiqeoOw0ydIAPqPIYgUK98mkUkw8gqlT8TavXzFrFtJKyuFfuhhF995rxsDg3ckn751s+h2aoAv9mNxpxKSdAXVaIhs+X7+mWh30TuN52VixbRXSW72anRIMC+eW0SheWFeHX9J6v09hPUVmdCnIyrXX4o+PPYYsssUW\\/v4L7\\/2SnZ3f2IhO3mPme58bMwZvUYVX0VD20miW8x4nNdrLO3ei0pUKS8KA0f4+DH\\/rrct56Tmtm6edBmXV4KzvBcMUT2BMvRv+ceOu7IzH5+za0YDSgFtjB+HQGBu3UP\\/LdLQYLcGuGLQUns8jEG\\/Qb7Lz76nE8mp2agLV6YgTTsDjL72ENaTQWrKaJCv\\/kZ1\\/l3J0ini9U6Zo09eSmMVAWBtPLuDzc0mhfFKygO1IbvjY1157khT5udZRKgdFxQ9\\/GBRdGUxLe9jd2ZnyNX936Z0dSvnpYMOS8jic2HuPrDJZvyZ6v4Ja7AuZtCSWayj0rbwu2iqXcnPslVciRMENU1aCPK9QfqzEupvy8BWtuaxZ28ZDVl0OTIi2k3ILqAzGEqg8stuEN9\\/8NQG5X+vkGWcQEGqSH\\/r0NTWpHzJYEs1iYOcnkS1kvFPCNFGVAWJoKwGSxPWlSC4DlWmGHN4r2us0qtiVBKSZjYsna9U1lSQMiIdQRRUtQdc6WvlVBFzWGvn4rEzbDQCRK3OQjDjfJ+XH8V2FbLP4b8+MianRDVAYmJ1+BQEZN\\/7bWcx7fMg6p72zatVbokqF1BOou7exsQCS2Qri9YwgNispnLWyHpe\\/RVsVITn\\/V8UO3MbrV7BTn+gTncIqQ8Tj5bUPSI0oEePj3yGyWj7vzRCbIe+SyVSdtYbSY3iRvlgOqZnPaxMvuRjXVb9Yk20tHaWYw3jk0kbKyOWTMWGnc08I9ElReqXNK7dvL5KOOdmYeK8VxOpX\\/H5bF26ZT7+IWConD29m48uJTZnwETYaxvMreF6SyiQXyykJZ4WFWNibjFYrSY1F\\/FvGkzMIUB7vS2FHJezN1oEYR423jLLWTiBkHkaSBbJOnoa7R85HTnrxeTaX+uojlzZDeeqa4bj0qS17wCEh2EZ2KD8nJ1ZVUGA8l\\/7OPWz0dZEJYnE4j3PJ09fTe5VsapkUvYbYfIGdljicmhmZOjDTCwrwtSzJEgVBIF6hFhMlIS7GbLJTrSylo\\/BWsIMePaVJFkfJxNFYvtNCADdQpfup2QQZMs8+eNoMnD9+KayWADKyXQ\\/9+XrPzcrTVw\\/HJXO27QGIyMMmo3FVSnb2hEcZtT1LH+oXNFaFbHgSsSxrZKRrhx11FP5C7zTBuGM2O1jPRhaIvBCz6TpWZ4sB5DWFwv83xh0jZcqa58WF9fC+Ar6vXXK5ZApPwlteLxPK8\\/dOfWAik0BuFyvP9rPI2spdv8I1u56ljYGsj3r3vSe7T1FufXIE7vnZlt0JA\\/JF9lC3sCOH0LL+g7x7PMnfxPO\\/4XGHzlJ9utyMPfNMjKIB\\/IIaRc6tYUMSHJWxU5LW5CAA8g6PriDu5SFOpbBpEd\\/fRE01iq7Np9RWogiEvQRZt0unhW1JEWG3LrKYq68PZZOm4KqjGuH3hzwpmeax6VnW+seuZmD1qzkjcdwbuzBmQUA3gTB9kEhEhSrpVHX\\/IIZ+zZffSyrI3Ps1JH+RjFHpwKTx96v8fZMsH5QVsBL4kMWqRCsydn+SbCl2p5o8LtkNIktFPASwQdOm4YVFi9h5E8ZnpKOMrCQjKy\\/SKxCtNotAFOhz7Rbal\\/yTTsEtva+\\/t9Vf9zOHy9Rsc5hIESs0QG58ZiQi6R5cfGEz1RQ1i6JctySR+IOAJWrWQsN2pWT\\/kLXaie3R7Ey6nvUgxxh2\\/pf8loXCr\\/PvuGghytBVDFWNDJK0QTkiQvhf0plkrXyM97rZ2bPI+6s6e6RNlOel0K\\/qQlsopCG0nPePF19P1l\\/KKsQPPhx794Jn1n\\/VuxB2hxmuVDP2AgR2N7pasjHnzvXYFVdUccMFEG0NBZ0+E+UkxMbLSGKZqfLqbHUyG\\/uNrNHgtVPYgTd57xB+f0K2+A1VZj6FexcDKUkm8PNehZ7w1DGjsY7U2fLpZ9pgxKdjGXWOykOrpQ7vrpuBJYsXIZ3Af3s4KIMOo\\/Oss5U\\/LJ2Lf7T\\/44cB6d2RA+Og7mOuu7b5g20Bg7GJWBdAPufxIV3pjz76SJOfiK4MTiZf30IvF2Spi3ivn2wojt47\\/HscOz2af4vmKbrgKHyS+jUmPE3WdIiLYYQ3HIFqp1Ioq8RZg7bCpTiRWhBEzJHA3Pi5CHy8FJG67ZphdY0bh+w77hhDLbehtqsF13x9874BueCOovuLJ3SNiASUE0wlUVwzVUWjxYw17IgYvVU8ZAj8OmqoDJlTJkukUfCuf\\/ddbdFEDjt9AuXnLVkFw6Od56pIOYm\\/iyhxP7+d9iE1geqgA4ff4dUCLnmvxWSHMmsCrjWsQCKcQNkwG+KKH5Y0FcWWQpyVfzzsNkfHeMfRg6FEfKKut3U14Wdf37JvQK75fenomuXe9RWjrIgqPtzwmA\\/xPpPG27ICahNZRVTtNCTTkiwDVp0dDhGwW3n9fdFItAeyWKlTZ7NyssTtsyln1J8pVD+ZxXQec866JbDa56617pxT09cMY1jVajJ4+8IYMa4CnmALTI4QXJkqXCk2GM2oNyiZgwpMyZH9CN\\/\\/1eI6mWLYG5ArHylGV3N4h68\\/UtnRHMBNtHBjW+LJ5UHsqGRSy4oqoyx0QjI9UFyKPMmM47lNusuSJiGtGFJee5ie7opcBQ8fZobJQIueriAj14xs6uRdiwtS86pivq7WIGN2yqIvxqgzgqzsDKjOdqRkKhq1nDkh2Expa6zI\\/GYVtv7Zuq4HqbK29tuAyKIexkyGWMQQl8n94770YnZNGN2Sy+5wIq1qMDbSaRzKTtv0EXVJARThTeffEr29zL9z+HchHbtVnl5sqoggcMggNOzYCWeaERaHSqokkEO3NiM0Y2hvqHab5KG4u5PxeMhPSrbSYzgogw6lB6m5MVjMdjic9j+YExk3fBcQGXeQ+80WwzeAnHVLjuYzBgOJ6S6XZYHfHcE9z1BLUbLX21NwFHV8g8MGd1\\/37kE+yWKbL6N\\/BECMYwrfLHlc4vluqU7Di1mUhQANYlE6VbEbthQFWfkWpOWpKM0Z\\/8hn\\/1hRP2piwVPurhAkQygUiBGoEEaPr0B3kMKfQuEvpLyEyg42W8wr9uXQCjChYAzsHgGpT66AGriQSCg32grsD93\\/23Y0WM3YTiGuMpAt1KRNERZawxuX8hgmq6MkUUBWp8nKTgInnByvyMZvBvcj6JWFTEXo6GiHzWWEyRZBZpGkxQ7+dMcG76ysIqUtHIznx+PJDKEA7w\\/5DHDmu5FZqMCVZmEUWkR0Jn44ZGJfHr9mZ3LZ0MDH540hGIpPfmJ+dGmQL9VytXjjdtqFuO6+iLBPYiAltkbGowpJmRQZSUcyG3TbqDQ8VxJClJrI446isioPve4OpGYbkZFP2SrIXmMLDp+wcv1ie3lVZiAajmuUFvZqqvNgzKEF8IXayYbxhKF7tPG7iwr29Xn61+v3BkRSjYqcxXjk3bamHYlEsbjg4tyFEgkM1NOZVlWF9evWafGIACe+lQRZg6tG4qcT6ZLEacH7o9r4V3FpDgIRt5Z85sqOIj+\\/aI0zMmLCmppF2uhldr6ryWI1FEuSZXdbEKmpaVBTmpCenlKflVYw6J9Cwc+jV2\\/bNyCl1gK82TUIaxZ8qXbJ1BkB8cpIoN5xKSpx9OjR+HrVKk2+KghYidf\\/9iXnmadGPJ48wbCnN0KXP4q+7giGjszR0pyyC23Icg16xxTNP9Xj60Znfx3MZhOcLsvv7S7z9QKIPJNfSiVT5F\\/gsuTP3B9AHrli+\\/cAklWFN1+oobSvR+Dee1\\/Y+eabF9OGKBLNSWDjIGsNuvDCI0z19fW+jRsfsra0nCGjJzf9+TQ0bF0Wiiei1v6eMPzke\\/muqi5Cf5DxRCnlDRMuVmLOlwwGI2qbl8JmtdBeGGTFjikRVZbF4+qEruYQikYH3FUlozMSiP9TQO69ZP0PA5JYuRKGZ56RNVAK6uoc0VDoOLPd\\/sbAxGeEgZWBvlRCl50b\\/3QyPckwej3t77R27jxZEmOEMj5qwsETzMgoisDSNW0QYagXUna4axFXgwOAaJlBNrvJRDa7pasldEF5SfVQVf1nwyOUkTsW7x8g6tChUHbsSIbAkhIoSxDJbvsCJNEd0GIBAmHu6m1c3d3XOsrdE8Hw8Zkwprph7JikDAhwQo2i07dFGyD\\/BhAj5ckEs8kAy36mOD1w8Y7\\/HCChUExPjolVNvds2CGltspGKttDTVVDBkY7FMWADt+6\\/x2ASNJZQmXY2rpSLSkYciaijje\\/3QlftJWuj\\/u\\/H5BwKKolkUUNHUcaotmff5fnJVgIMvj9twHZ36VJP\\/hh3xiPIdNowX3BoXBqFdv+uZB+8\\/w39d40RSJfMlYsNTkYnHUtXIj2r75CxSmnwMU4X1uoOfCRBZvyrCCZWjVGhMfr6mCdPVsLueW8rLRTZSTH60WMpsNUUACDDJbLgk7GVCpDcoWamHE6dsbq8WTa32BMSA0QRfsnOIonYnSAzUjmKuupWL2ZWoafzFrEYpFcZ0FXlcWmLAkFE\\/i+bL8f+miZgP9HkH+VIAolgbGhIiv+28d3tUSXN6wzmsqG2+eUDUm9Kh77557Vdz8PXfZ\\/EvIvEkQRCTGqSvzYkNr1mNvtHZToz0ZHY5TRl5IornRNZFfW7Icl3+Mz58am\\/yPI\\/hBEa0b6lVCGhKL9d5pTfMd6+8NpYa8EZHFEfFYowRx0d\\/cgM8cuduRlZ6rxogMlyHO3Nv\\/\\/gCCSEs\\/bEi0tUN1uxGRR834RxCpVDg6OKZ5fhYLBI60psXRJZoj6HGwnDG9PHPGwFdFIFBkOGZvoQEom22IwazQpPSkZpkr2q\\/9A0PjXu9v+P0QQs5leUOiG4OLFWZZY7GXrrFmDu1ateta9cmVRSAZ+eKvdau11WK07XdnZX7qGDp1nHjt2k8Hr9aOqKgGHYwL8ocm94c6st6yfTN5q3XG4397PphiF+2T4TIXfw79jZvaNga+HaixskuEHdLT3MRhO1rxLSbMgNd2CSDR2TiKeeA0HYNzffLjrfzlBjEZjsLv7N57a2lPcTU1jQ11dmhsrCxp6dKkZwMdABqUsApTBK8mglBl9ySiTGRk5ZIJEAnntOp\\/MqRiGjGFV6MyMoc\\/sg8tHd9aSih3pXsxRl8GUlYmGGi9d4yDSs23amI8zxaStVIvHE48l1MT1B+JsvfX77v+lBKEdSCQSw3u2bJnXsnBhRZskuIjryUMkQWaEZCImLO9UklZAEoy1JGMeQgzpocQcVj2L2qJPN0tsIukXUspIBiAkj0RSxuV+E89JsrLTbIX12MNwkXk12gIepGeSGE4TbAYTLDYDnKkWCcAWuHuCh9Ml3m9E\\/ONP7v9CgiRLL030t7efHmxtLTRmZe2MNDe\\/2rdhw7bS44+XfJSTmj\\/88F0P7URMpsolq5XfMtIpiTppPIodDm3qTwxxJm2FILkjGESfJH7q43IDY3EDhVFS+XwBD8nWkMklG49dJLQQ1jpASCGKTDwZifzKEqzJUHF0KI3wWuAdUoh7Ctej2dxPyTOIhKzo7wsJYqP7i4bP\\/uL5LyIIAY\\/EYpe3f\\/zxn3obGuDTEyFksF\\/qRQeI3MljxtRmNTQM6eroQIPUiOF5mVOKUmKqiKgxeXnaEmHJJonIqna+2iPr2CSxQp8tFKmjpkMqCZXucqGGRt0nBSH1HqfxnVJFWlvnzHslnWyDzPvyvaLWNFUnxJF5WTl4v0iX\\/J1bVY3nT3BgaWoTVK+6rLczMF3A2m+CvOj9cQmSRYI8GBxGjhqoqrEfHxnei0Yv6lu27On+LVsc\\/aJuSAwZmPXK7Is+2pyekYHDU1O13NUWEkPSbaTvU4YMQfnFF2Pnn19EvK9TK9YuGPASyVLPW2rvKXpvlG8dA4MZWSSKrGRpkFQGJLPM5FvqgEseh2TSSK2ERTxkqjePfTPras\\/yLXVn1aRKRfrMw3D3hFZs9Xa97O8JX2Q4ACPy1RvBH48gAoViNGje5wQ1DSeG8lActSGZBvY9xJHU0p6et\\/v+\\/vdT\\/TTU\\/QRYK4qiHyIdMgnfKaU7Skowk9e3NDVp8+NS8ubICROQ3dOD7du2odaZhQIa1EA8gSZy\\/UDyvfpN93Z\\/RHJS2bZk8pSkp0PW6MYDAbSzrf5YMqUwhYQaSvtloyR189wbW7eim5IomUOi1iqtVu3vAaJohJHaEMPH4P2jrOrTfRsuSfTHXzIcAEWWvRP+cQkiWadapXyjGEU6Q+YE8mM2jI26cJI7A86YcQ8CqRZLeveSJZvdGzYUiFRIzS2ZcO3XiSE2oY6I6uXfFxH5efX12MbgzkuCSP2gyURanc0ONR7TVIib93t5vru\\/X5tBG5AMmQaXbL8y2pZT+cxa3ifZ382yWFpyMtnmCbx2VmYm6hlArqKKE0nRyghKaSDGKBYSZrlMCksJCKpMUW1DpZS9Lh0aQaS0UOVwvHawccfDnpqxjoTiPxA0bpqX+M8RRH4bjIo2Nm3i77hRXEkDzvTkYEpvulhHqjkcRpuxyE1E90lKik4MIYoY5a1EzPHjxmEipUL2uQiQK4VQggApoh\\/OzUWQCO7gdSGEpLa4+Uw3pU2KekhUJhkmFXzuJKq7T3mtlwQ4l7+lgJQiiy0kjZjEkCr+d9J2Hdrbi8P4LlFRYo3FGooDUMxjrKxpoJ1KqapCN4PMD9atQwHVp10nihAkv7gYZeMPqjWXlk0iIvpxIOH6Y4\\/+zxFEMSjaqKjK3zFaxyEBJ6aFsp2lbyxZ1bqjZlg3ESIE6ZO8IR61lITZJMYh9KZqfT5NnYkRFymSJNmy7BzaiRjauvsQynDJaB+aSIjlvFeyZiRSkeSoXx10EDKpijZv2oQ+EuK0QYNQt3MndspyAr7nIyJyoxQo4bvvJnHfkDrvjGfO5vm\\/i6fGd0jCu0jMaJ0w5rQ02Bnli737+4YNyJb8Qik9I1JCqcsmUUpnzVpszciYhv2Zmxr4PPLI\\/xRBjNpwNQOlEarZc2nC3HdIwt42MWHwm0IWBskBc+KoN+yGlGVRNNmM6JDiEXzllSNGIGXNGrQQeR6dUGLsFSL4YOp+r8sJdySKPqkyI8tLqd4i9KrkWZladmRl4ZjRo7Fy0aJkfENJsPJ5yWRr1dcOSsLlVezfThJrLp8\\/u7ISB9NedS5YgDCJM2XUKPizszHv66\\/hoSqUOXdJaE6hxFkoKVLk95Mvv4RJUvuIS5uuuooOOQQFRx01nQHTov2Wkt\\/97j9LECn\\/ohr8VyWczRfGrG2TY2E1uVgmwgAuLvUZrdrD3kQIkxNlOP0tEza1NaFRUqSIoEuLihCgVyX2JagTpJUc6CPyJ1NibDk56CZihSCjiKwN\\/F7HN2aKTqfEXcRAsoaIbKVKk+krkTApeS05yRuB3YnX5\\/MYSeR\\/wedP5zvXyCIbqsiBXJGZpaUopQ17lUQCPTdZUiVpKnZKgo19XESmEYkUu2LTVVcOvb+Kiy46jaf\\/rhFkf4hy220\\/PkE0h9IQm646225N2FtmyZRhJGBCOBwhIVSoMROMBou2v0QsJsPadBVTUnH79qGIfbEW3VYTmvUs9bMqKmDauBFe8cYkc0SS+GQnCCSzQ8bRCHeScEKQHNqHGr5zl6xaEnvC67848kjs2L4djbQN4hHZdMmR4s4SVCp62a4NUmhY0it5brvkzUlcw2sfJMHSEveOHzpUKyD1xvz5KCKxpEyDndJhKSjASknplxW5erRv5vOlM2fGCs49dwiCwXpJKpS9eLTDYvl+4hx33I9EEKGJFLE1Bq6yFNU9Ejf1OYJuxg\\/+hFaoPRJkZBw1UnVZJTtX29XFZDJrS8683jCcVjvu21EI84Z6eK1mLcVNllxOop6upsH3EtGykKlDL\\/IjRlYWBx5JrpaaN27eO4Su7vt8bpsUjyNBpCD5lcceiww++zlVluTaCTFM+mHENzUIxU6I+hJvrE2KZ5Ewsu5uIaWxVCfKoVSRU6dPx06+b+Mnn2gLpmx0m23DhyPGa9tWrECATCEBZRoRbz3mGOx65x0ceswx210nnHA51eVCUZk\\/SBBZUPXvEkRNKEpMDV6eNXbTs3ElBE8nVYOXLqtPQTxk0dST3xdCNKRqtQ5sTjP8nijPA1ab7DtD++CJIMPhwu935SO8pR4BSzIwlKXXR1Al5DDO2CLuJpLGdQuR9SWvz+T1S2XzIyLGSZUlBR3nEmBJpveRALOpfo6fPBm+5masr6nBViLYphNkIDpI6Ie4uOKj5pHAh1IVXU0nIEDkStKhjHlNoyGfcthhaKR0vL90KYbz3EF8v4UE6W1sxFaqRbMMvfCZYVdeib+99x5SW1owVtQY+1l6\\/fUBy5Qph8JsXv8fI4gaN1hVR8+8uK3piKYairw7jlAwpI12qmpCi0XiZEubiwGbJw4LOc9uNCMrwwkDkZ6gurLbLbDyXMxoQkHcigs\\/7UZOxABbJtWBZOSxHQONMOhtbaUkSA69LPGQldklUp+R586ROQ9yqWzU1iwxhizjI1yS7CwOgtiPa2mYU2XDGtn8QSfAwACPtKHZADoBMyZOxEuffYaFMhKMZMQuxxk04FYS\\/sO1a7Vyc1JAdjqZJUT3V4ZXAh4PisvKkEG79dJzzyGN3t54tjl40iRYZ85E+513o\\/S8s+GYNfunJMqz+1xffNJJe+8zdGAfBZ5oA0xqKgxmY07CZDrRHem+y9veUZTZFsZxaimuSptAKYoiyg6G+3rQ7unCOksIM4ZPQY7Bgbt3foi52WHc35aLo7qB9t5ObVBwYHhD1IogwiWTSXSFXyJh5ovfT718PBESZ9ywmedl64IjycUJSoFbVkZVV2MF3VsTPac0Ik\\/iDyn9eBA59mA+L1l4slGGLJIxMJaYOWsWfHzXJ1RvMljZqa+Ykh0aLmfsYaWteGfdOg1q2RZpKqN4E4nQzbZlTUMOvbM3KD21fIfYI4lPplB6Cmm\\/6rvdaKW6HkLmHPTbOxOGioqJMBjW7CUpp56aJMg5t844cOlQhAkVFDbX4vBNUVTX9aHUE8tRRo5dqFYOGp4YNgQ9y5bDsGYlJSah7fIykP1okACLXG0UXUvDrPb0YXtrs7ZoI\\/VbbRi\\/RRQ5snivcHYrOU8qzNd0dmK7LMGRZTSioqi+SqSoHKUglQb4oOuuQxtV1ZvU5TVUHxK9O\\/Vh9c28X9YC\\/YR9GSobX\\/BYSMRupzTKzhoiVefLIkMS3Tx+PPoYwX9KOyH9k5VgjbKGCEmD79CPXKo6qSP6OVWkjDin6MP\\/ObEosmNx2GRo5fTTkX7mmbJFzm\\/3IsiZZ2KPLRf\\/1Y+mVsrL4c\\/L+8DX2Hj8hj4P3FRH+dEgOvWhbkn+lQRhiZ7tuqpoBXYP6JWTu4cQiJfa25HGZ8r1e5KTRcl75FtW7GdRPQUocbKxhMQVs6QGCRGbSmJIhugKuq2p+v1SCHXSOecghe8P0i50k2M3MfCrJdK383lJ7BePTLwwWUR\\/tMQXUlSPtkRKq3t4bzMRXKsvJRLVJgtk0nQ4nN8+xKEYORL\\/4P3r6B7nS7lQHi59nYhUFiieNg25V1\\/9GG+\\/fi+CaCtAxXMZNerfIcawfpttY6Kz09TQ2qr5+DEd+RIxi0EU\\/1wOKQPi0Imvjbay7V4p3qJ3TJAuBYxX6fq1VG9jgCAW\\/ZBlHrJm909EqtRMkft2SskSKX5MJKt6KWqL\\/py8XdYBV1PNOGU3RH6bpaw7iSpz6wkiO0zV48zP1wosy1z8V+vXa8M1RTr3O3VCNOrEGDj33SOLqrKV73tddijg7zK+XxbHuWRii8xSSeZIP\\/2s89mpV2Txwe6PBHCn6TYEhYX\\/GjWMRrs\\/J2dlY2PjiA3svBAgpnORBFwy9iMcLHXu3bIvjqTM6xIjs28Z+ioNWZrYJpGzrG6SmT2RGEEykqWDc3VCWPVvGRKZIPvl8Bnxqk7i3xP4\\/ga2Vyc7o+gEMesTS1qWoj7nIqO3UqlU5klk2WNET+MPSfApfZe5F33VrXC8rBc16xV6U\\/VIfF+EEGnJpFRl0\\/h\\/RUn8kh5fAZlE5lGEGA4ywKDq8Yj84vDEE+rr55gNzjcUfZBVMahwd9rx7K\\/XDRSMPho4kNn4JDHQ2d399uKVK0+N6kQQqSjW13\\/KakK3XpJVzotaGJipieObaTRBvlNf4yCcJGvZZJijRlbm6kSRlY6FOkFs+rdI20E0nJ8TeS9KESv+LQvH23SCW\\/TFffky4EfbI4tla2VwUfonyQiUhM\\/4W4tLSAwhSkCqSPAQ7k8hoaX4r7zHOnDoBbO+bTe0OiBSmpzqzUkYPqX7K0t+imjbUvRlbU4ySa7ZgcS1x+CRojfhJFeZ45lPWw3Z18iks2rxIdieh6duXZMkyJPXjcRVzzWRY74\\/vJeZtjCB9uTmIkeKwxmNeTuam2t3NTSkDiJnZBKQHUTOa+xUF++7gmowQ4asaVSdNL7jiRCpgNXGc7KB5tuyW+e3OF9UyxQi5mBeyyAAIjF1SO7HJKvOxMiadQ79NjLGSvk0InYlVU4c39RiEvYySvkCGuW1st8B+2fWBjcVjXmkvIfsKVvHNhvoLYlnZkyqYE3KS2SVs5Q20GcDLd9p264fgwlrFtXnQgleSXwpJW3Xq5w59HW52lpDXsuaNhX3zGxFS6gRKTIH70S\\/y5ZznsWRmCcEefKW1UmCPP2zalzx1LY9inh\\/9yOXhNsXiQ+uKIyBDE\\/brdbLhtGYf0R19ToRfCtd03Ii\\/wn+\\/ood0BbGyPpafn8i06DiSvIopPGeOW6cNkv31saNWmTendzyEScQuCF8NoO\\/X+JRr6sE2UDLpQ9zD+hvQchQcn8JDfZWRvR+nRBxqYuil7N6g95RN4lwiCQo6LOJ4m1J4oLmbIgUyeJ+KWGqL+DpZl\\/F49Oma3ViDGSmyBIriUuyZVUr+yrqr40EFbWYPWwYtvG7h665S2IufQ8VjSAy33\\/BObgpfyuaepphNRtgskjhmjj6+\\/woG5L2m5fvarlPI8gTN1Tj6j9s1bI2vk9zyZU2RXmqUVGukoWhfXxu1pAhWCpeDQOy348di81r1uBmcuL5UjWBxyYax+EU3RoiqI2GrkTmufVSEIK8AIE6jq7e4uXLsYgxw9kEaASfWU9PSGzIZiLmZRmKIPeKaiknkE7dPrh0gkygBAhxNkl5CFmMJ1O3\\/Hst7xO1Ke6K7AjYN9Dmt1ToILrPR9B+xuhCf03mWMJDcyCEeHpSg1k\\/pK0Z5H6ZvXyW7xYYZMh+thRK1xlFqwZ\\/5JHYunIlzOyDJkV6wkTFeZfghdEBvLztfbjMdm01icViaHamme7NzLPNkXVtD\\/+kLikh1748BiNq23HRvZ2IGPYWEzlDLnt6dSJxVV8yK0QDbgJV1VopykYOuV1qM5EzGgUpsrGyXhxXDPKVYgt4vpqEHPC+Bg5BTAmj2ZH0SqTUvew6cp0UPJRdSUhIuS6jp1KJ3q3bJwFQbMlglwujKQkvkJgD41yijkQSZO5Fyl4cyuMYJD0kr06MkP63bPIeIeI+pN4XdTqF8Mj+kTJkEmCbwvU2KYDFvpvYr7kM+lbwXJpOJPmezmviDg8kOqTNmIEO9ifW2AiX1ASZfiQspx2P+3pexuqeLS12k0W2an\\/TYjOuk+mJgcK\\/UqDx4ct0gtw0ZxRMBb1QW404\\/+FOlNdHSBhlty4mAQbXKsrmbfG4OaobZAFcClYfTSAeJvefQTU0hQia19GBjyS3SYY7kKxpMIqILZWcWjW5M+kAMXw6wc\\/ie97gtcd5nE6OO0GyQkjU92QnIqlPJfsMSGl\\/vkPqKIg9OZwMYOA977I9QbBNVm2KRyPqh39H9UNUilYJWJ\\/zFl2ew\\/vGHXaYNrv3wWuvabVKJPIfb7cwzjFhmSeKYDxCAx\\/R4iZR1aruUAyw6zD2eYy+T8JA8UjNQTn4YGRcdrk3bDO8+F7Dii+e2\\/p6TdDg3+E02nZXXpYlq2abbJsjlZe\\/hyDWnF6EZZFkyIGD3w7ivM+aNMTHFcVKz2R5k6KMkeITAyOjUR2pFhq10eSEV\\/Qt3qdTDaiyZTq5vZ6dlLkJKZ3g1zkzpD8nv8fpevk+Se0nklKI\\/ONltwoeMrexhUSWUnCSrCaFMT7nuWNk9TVdyxBtlYzoBmQnGFl0I8ZaJ8BuYgiiaGOs7GM\\/bUkf1anCd4ptieolgGxmC4zFFnpKZhQnrPjzwe3IVi24dm051jU2wRf0a0wp+VyigtKlqgG+SQcaIIZWupTMmXf\\/\\/V8YCouO6OtvxdPrP8SC1iUEMqI5GBbbv0CQQK8VYbeLnfShsCOCE97sGZa2MbixzWg0SdAX0QkS0T0a8YSkZNzpJSVQZcSTHGjWOSmmH3F8M7wtxJB9UMYRMSukYJPMrlE3ywLT2bIdlZQyZZ++ZDQuO2CXkxAb6DAskJFf2WqE9wun5jKizs3JQcXUwxCp3YxV\\/WuQudnAZ1QSSNHa8qVlYAaBjrr7YZ51LHroeq5+73W6mckNB2SVb3VFGe6v7MR6fx\\/KCgrhyqYLGulHiJwyI1yIG3sPRee2XWioWUNXNaENm1h0j28gBUicAydtaNYNNyxHWtphlEaqAzMW163FrV8\\/AJsDB0iQZ0ea7Hl9sZBXCGLOjEcMk3NGdNwUS4tMH\\/NaDBOfog42GuDjS+v1ZIIBRIs3sl2XmAvoEs8YPlyLdGs2b4abRjKi63RJJKiiN1RALmqimnlSUnVENYnN4XGiTgyJQyQxbYFeUUI8JklGkHuG872j9aQ2zf8XwqeY8OfLaOPKZOdKBeVtdsx4hAa5N0RGYeRuMCEkFVASYqQT2lSytt05pWXkoGF48aAE3vfVwRRmRECgRowpgydWrwXOJhOJaaGUK6k4yzgNM82j4eqNwr+pBgk6AiaZf584BpZxo7fA4fwJrfTS3YbXZMHWtjpc9rkUblAOjCBn\\/Crv+Z728KWDD1JgSfNC0lEjfgvi6RFMWUBv6jloW6b6SBSPTIPqE0ADG8lKcaB2JIM3mW8OE4ETyTEy0CcTQylUG6kyMtvcrBVY3EkuF7exSyJnHhcSyaLapEKSl4RrJ7J6+Fv2u\\/Hre97I8uyZ9PVH6PGCGNI1FQbMOdYCJwGTeR8LqWRNpauZasCoDab4keuqA6a+kCsaDysJixkGuql+lwGNWSpqU+L4Mr4TfT6qpIieLhSIwuVMQ\\/FgG3q9LYJTYXSYrXy\\/na4y3bm4atCmFuzkBoMZnZXxiUMPdUxxDzNWIcea9824oE6Qyz\\/9NZxs84AIcsNTFehsD\\/+ptyN0eTgoC1OMyMxJgdVihd\\/ux6Xv92HcuhC6jcl8Kb8+vx3QN8ntJkLXSuEh\\/j1VL7Y7MNegfsveSDSs6Elwik6IwRJB66pP1EyCmJVR3R20DR0ynCIJDuLJsJ8XUH2JupLp23lVRjx1sElzf8VlFORZ7LJvNYF0xWHPjMLhytqR3jWlat6nnw4uHGHfbrOZkYiQ6D1RDTHaVgjaHH9cm+uX9fIBXwQjx1UgamxHNB4iosxa6qlipOttj2r7pDhENONW2T5hu8uURx409Iriiqt7znFIkhzRjrYmr1SGZn\\/M+0eQn9xfKFk08HsTPw144s\\/Isi2ZZpU9HDzk1F8sCWH2rpiWMyVz2wG9TovsmyKSIumbgkgpgTKU3C27Tu+QoWwenbqh1dZOsJNVfKZSz0TXZu6IdKkA2q2rQDHGUsgslTbCShX3JVVbt8GIW\\/wBBmUJvDfIhlcnZaChvQ0OvsBo1jhVA0gjiIOG1qVoUuJIMyLbMXReU43h5C7PjtdKKjNPk91BBCnxuKpVKJXNAEQ9CSMKvLLgJuRTMXpiCdrd25MSQi4QQtgcFqiyyNMSgj1d5ksy3jZFs8\\/Ct3bV+e5HSzdQkmsS+7pDPALsK+2Q\\/QcIcs6tubujv0hIzaJ4zaePPCYWVYl8FWNqw\\/jpB14Gjsn0fS06laVi+QWYVFqs1dsPjRyJxU8\\/A39YBu2Mu7PLJYdK1JEg2qcTRmKMTTwf0CNfUT8yjtXMa6t5SCUV4XyXDKnnF+HVjFZ8nM1IPpxAKoFxpdiRl5uHlrZGbfmx0aRoxXkNNOhGs6oRxWCNwpmuyk4+8ZTwxJ+vWlz3mjUl9GVqhn2MqI5wKK6VApDlAyIdsuRZ5m1kH3XZLzA7JxPFVXZ0uZvhsNv4fhLfGoIjnSoxxaw5QFZk\\/8Rssr+w32k+SrLOqGyBJOpRmEK2G96LIKden7UHSaOUEKjKFc5U69OSTOKjOjj1My+mLAuinR6KpHaapAwT2WcbFbeTnGUO+ZFjUjSqD+TSGnTVZdbXWLSyrQ94iIEu1QNQWYch7BXWB\\/KkOphGDCRHdV2pGejJNuLOkh5KgkmTXEGm3WlB1ZBSbN1cR4KomqSYZdBOVBYJYncp2v5QzqwY0m2ln8e7Ko5ZtWFxWl6x89WMbPvRUsNHVJaoD5GOSCiudTroS+b2evpCKK8sppvch0DIDTs740yXLWRtUEgYp8u6zhQqPETXtP\\/CJ5noKkMnRl3CdxNkYMuaPURN9n5y0y6QMOmlrgere+Ppl\\/6pBz1iR3RbslOmRWUYQYqo6pG5cL1Pd3MHPDEZNc2UySPJ19WDqYG8W\\/nI8IKouTQ9Ah8YqxKipKZmoiPHgDsHu8mIUtA1rnGWcDmlGSNGD8L2bTs1olidRuppE7mZ3hRDWKuLnle2Skkr2pSSGHdoS\\/suT139Fnqmzquz8h1PSQek5orUZZE8AOFeKc8jFXF8ngiJEsaEg4dq1Q3CMS\\/fH4crk6o3w5CI9xXeYFBTHj+gZRf\\/5PPkLzf\\/MEH8npjGOZJb1R+PKzMSObPvWBF7prmvt8yvV1mTqFhsh8xjyE4CMuQwsCWuuLsSQcvcRw5twijGFpt37tQIF8GemekDE1A2\\/dBGVaV2ZH4Jni1owOfUqi4SJEhRF8RJpR6RFLOVHtXYwdiyaQeRm4DJKjpfTW5Slm6FM4PRubnwK0d0+LEms8lX37gNbZ2NMPPjdFmuyi5wPi7VfKTLYkukoo827CIEoUpzuCyUlAJ09tfSs6V0mCJ8t6kvzVo6zmgJN6gHOm3xA58\\/\\/LR+\\/wgiHZZFLdUpZXjTdTiiGzZMqV279iO6rSkSvIlRlx0StYkpWUADLcLfzTvaXsWSlEYEH1Jejg01NdoEkfFb1wfUmxDQJRFvVg4arW68PCmMRrrhCV8cFisJ3x8ZWMOnJd5pRaeo90dPGISddfUkSEJbUmZzUK06qP5oexzRoS+bIyU\\/YSdiUvemvnkTbZ2bRDFosYfVZj45Pdt2i9VqPDhIgsjAX8Ab0zwug2iD\\/mS9qZ5AHVJySGB75oYUW+4EWUX3o1GDn4eu2HIABAmRIAXD8ebtH0BjJxpl9xNP3Nz23HMPyAonmRE06AnHMpw+kO\\/k1IcXZPFNLokq6qnw4IN7csvLP3a3tp4QjEZTZY7CJPPju3Y9be\\/re4hM3vD2hePx2bjsn\\/o7t\\/7e4\\/XZA964Zkz7u0JaYnWCaiUcStZxl4JbFqsJI8aWYVdjHW2IpB6pvN+kqRh7cNT1pkTmY7LRg3C\\/FAGoa97IQF3WYxg0Qssu9eJ1WSymWfx9odFoOFckJFlMTHYfC6KgKAcJezsZRtmenVUwmhz3L9qPfX8evXznARAkSIIUj8Cbc9Yks+8E4VLU5fnndTY3oP\\/LL29yBwIPGhyOZndHR7FZJpsqK9cr0Wi3KSUFjvLyT6wOx\\/NESq8s4o8wUPR9+WUy4kbS5ggRRWW9fcFYLDusHEYi2+v1XtrZ0\\/Q7xeorkBLu4u6Lj+\\/V9oxVtCpQEqxZrTYMrs5Ft7sFNgZ+zkweTmcY7eNGqaqyfQA2idaDES86+rfuQRCBVVxibTsFi7btWg5fOyUexS2hQKy6pyOYEgkakFtqRtmQlBmWeOFCNfHj2ZDf\\/3Lpv08Q5U9\\/0tSRmkslT1WjVduRj56spu1bp7u7WtfFoMs1nw+Rlhb4SZAU3cjH90EQxRPWDLm2CIjOWiAQPL7f33VbwtR\\/UF+PTzPuPe1hzc75vRHNXS0aJpXa+7WNLs2h0sWJntLDFOOeoYJBMcITbkOPt1E229wnQYTo8m008ptE0\\/YGV5DFvjD8SlgYhHp+RBOCBy76ESTkuwQBCaL1UQqA6pUafwyCCHISGoEZB0V1AkWRFYz4Luh2t97Q5+4pkXd3NYcxYlIu0ivbYYg71VBD9en09P++rzJ7smC6w12HhMkHZ4r1BwlisiTjHfnboMOyv5sW7jdBBsoz\\/W8kiPwW1RWNxrWHRA15gt0\\/r6vb8YTVqWDiyRH0bKr4ONaXe4xi\\/P7KPEKU\\/gjdZkdYyz\\/+P4L8CATR9LhMD8fldzTbh9rPUmw5wagn\\/SzSqemHkCBbdkbRj4StTYtr\\/o8g\\/y5BYsn+xYQwWlAjFULjmQbYAvF4PPTPVpQJQWIMZeO25v8Kgvw\\/ApkWUMdpN8IAAAAASUVORK5CYII=";
        String na=SyncWithCloud.data1;
                Log.e("bitmap --->",""+na);
        takeAway.setBackground(new BitmapDrawable(Main.this.getResources(), StringToBitMap(na)));
                showAnnouncement();


//        takeAway.setBackgroundDrawable(getResources().getDrawable(getImage("cancel")));


    }
//    public int getImage(String imageName) {
//
//        int drawableResourceId = Main.this.getResources().getIdentifier(imageName, "drawable", Main.this.getPackageName());
//
//        return drawableResourceId;
//    }

    OnClickListener onClickListener = new OnClickListener() {
        @Override
        public void onClick(View view) {
            switch (view.getId()) {
                case R.id.back:
//                    showDialog();
                    Intent intent0 = new Intent(Main.this, BackOfficeActivity.class);
                    startActivity(intent0);
                    break;

                case R.id.exit:
                    finish();
                    moveTaskToBack(true);
                    System.exit(0);
                    break;

                case R.id.tack_away:
                    Intent intent1 = new Intent(Main.this, Order.class);
                    startActivity(intent1);
                    break;

                case R.id.dine_in:
//                    if (Settings.table_edit_authorized) {
//                        Intent intent = new Intent(Main.this, DineInLayout.class);
////                        intent.putExtra("flag", "0");
//                        startActivity(intent);
//                    } else {
                    Intent intent = new Intent(Main.this, DineIn.class);
                    startActivity(intent);
//                    }
                    break;

                case R.id.pay_in:
                    showPayInDialog(0);
                    break;

                case R.id.pay_out:
                    showPayInDialog(1);
                    break;

                case R.id.time_card:
                    showClockInClockOutDialog();
                    break;

                case R.id.safe_mode:
                    showSafeModeDialog();
                    break;

                case R.id.cash_drawer:
//                    ReceiveCloud obj = new ReceiveCloud(Main.this, 2,1);
//                    obj.startReceiving("MaxSerial");

//                    SendCloud sendCloud = new SendCloud(Main.this, null);
//                    sendCloud.startSending("MaxSerial");


                    showCashDrawerDialog();
                    break;

                case R.id.refund:
//                    openRefundDialog();
                    openRefundDialog2();
                    break;
            }
        }
    };

    OnTouchListener onTouchListener = new OnTouchListener() {
        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            switch (view.getId()) {
                case R.id.back:
                    if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                        back.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.colorPrimary));
                    } else if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                        back.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.colorPrimaryLight));
                    }
                    break;

                case R.id.exit:
                    if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                        exit.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.exit));
                    } else if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                        exit.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.exit_hover));
                    }
                    break;

                case R.id.tack_away:
                    if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                        takeAway.setBackgroundResource(R.drawable.take_away);
                    } else if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                        takeAway.setBackgroundResource(R.drawable.take_away_hover);
                    }
                    break;

                case R.id.dine_in:
                    if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                        dineIn.setBackgroundResource(R.drawable.dine_in);
                    } else if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
                        dineIn.setBackgroundResource(R.drawable.dine_in_hover);
                    }
                    break;
            }
            return false;
        }
    };


    void showAnnouncement() {
        ArrayList<Announcemet> announcemets = new ArrayList<>();
        announcemets = mDHandler.getAllTableAnnouncement();
        int count = 0;
        for (int i = 0; i < announcemets.size(); i++) {
            if (announcemets.get(i).getAnnouncementDate().equals(today)) {
                if (announcemets.get(i).getUserName().equals(Settings.user_name) || announcemets.get(i).getUserName().equals(getResources().getString(R.string.all))) {
                    if (announcemets.get(i).getUserNo() == (Settings.user_no) || announcemets.get(i).getUserNo() == (-1)) {
                        if (announcemets.get(i).getPosNo() == (Settings.POS_number) || announcemets.get(i).getPosNo() == (-1)) {
                            if (announcemets.get(i).getShiftName().equals(Settings.shift_name) || announcemets.get(i).getShiftName().equals(getResources().getString(R.string.all))) {
                                count++;
                                final TableRow row = new TableRow(Main.this);

                                TableRow.LayoutParams lp = new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT);
                                lp.setMargins(0, 5, 0, 5);
                                row.setLayoutParams(lp);


                                TextView textView = new TextView(Main.this);
                                textView.setText("" + count + ") " + announcemets.get(i).getMessage());


                                textView.setTextColor(ContextCompat.getColor(Main.this, R.color.text_color));
                                textView.setGravity(Gravity.START);

                                TableRow.LayoutParams lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.MATCH_PARENT, 1.0f);
                                textView.setLayoutParams(lp2);
                                textView.setTextSize(16);

                                row.addView(textView);

                                AnnouncementTable.addView(row);
                                mDHandler.updateAnnounementIsShow(announcemets.get(i).getMessage(), announcemets.get(i).getAnnouncementDate());
                                blinkAnnouncement(annText);

                            }
                        }
                    }

                }
            }
        }
    }

    @SuppressLint("WrongConstant")
    void blinkAnnouncement(TextView text) {

        ObjectAnimator objectAnimator = ObjectAnimator.ofInt(text, "textColor", Color.WHITE, Color.RED, Color.WHITE);
        objectAnimator.setDuration(2000);
        objectAnimator.setEvaluator(new ArgbEvaluator());
        objectAnimator.setRepeatMode(Animation.REVERSE);
        objectAnimator.setRepeatCount(Animation.INFINITE);
        objectAnimator.start();

    }


    void showCashierInDialog(String times, String dates, ClockInClockOut clockInClockOut) {
        Dialog dialogCashierIn = new Dialog(Main.this);
        dialogCashierIn.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialogCashierIn.setCancelable(false);
        dialogCashierIn.setContentView(R.layout.cashier_in_dialog);
        dialogCashierIn.setCanceledOnTouchOutside(false);

//        Window window = dialogCashierIn.getWindow();
//        window.setLayout(920, 470);

        final ArrayList<Money> money = mDHandler.getAllMoneyCategory();

        categories = (TableLayout) dialogCashierIn.findViewById(R.id.money_categories);
        final TextView mainTotal = (TextView) dialogCashierIn.findViewById(R.id.mainTotal);
        final TextView user = (TextView) dialogCashierIn.findViewById(R.id.user);
        final TextView date = (TextView) dialogCashierIn.findViewById(R.id.date);
        user.setText(Settings.user_name);

        date.setText(today);

        Button b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clear, save;
        b1 = (Button) dialogCashierIn.findViewById(R.id.b1);
        b2 = (Button) dialogCashierIn.findViewById(R.id.b2);
        b3 = (Button) dialogCashierIn.findViewById(R.id.b3);
        b4 = (Button) dialogCashierIn.findViewById(R.id.b4);
        b5 = (Button) dialogCashierIn.findViewById(R.id.b5);
        b6 = (Button) dialogCashierIn.findViewById(R.id.b6);
        b7 = (Button) dialogCashierIn.findViewById(R.id.b7);
        b8 = (Button) dialogCashierIn.findViewById(R.id.b8);
        b9 = (Button) dialogCashierIn.findViewById(R.id.b9);
        b0 = (Button) dialogCashierIn.findViewById(R.id.b0);
        clear = (Button) dialogCashierIn.findViewById(R.id.b_clear);
        save = (Button) dialogCashierIn.findViewById(R.id.save);

        b1.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "1");
            }
        });
        b2.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "2");
            }
        });
        b3.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "3");
            }
        });
        b4.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "4");
            }
        });
        b5.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "5");
            }
        });
        b6.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "6");
            }
        });
        b7.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "7");
            }
        });
        b8.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "8");
            }
        });
        b9.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "9");
            }
        });
        b0.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "0");
            }
        });
        clear.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                for (int i = 0; i < money.size(); i++) {
                    TableRow tableRow = (TableRow) categories.getChildAt(i);
                    TextView text1 = (TextView) tableRow.getChildAt(1);
                    TextView text2 = (TextView) tableRow.getChildAt(2);
                    text1.setText("0");
                    text2.setText("0");
                    mainTotal.setText("0.00");
                }
            }
        });
        save.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {

                ArrayList<Cashier> cashier = new ArrayList<>();
                if (money.size() > 0) {
                    if (!checkIsCashierInOutZero(money)) {

                        for (int i = 0; i < money.size(); i++) {
                            Cashier cash = new Cashier();
                            TableRow tableRow = (TableRow) categories.getChildAt(i);
                            TextView text = (TextView) tableRow.getChildAt(0);
                            TextView text1 = (TextView) tableRow.getChildAt(1);

                            if (!convertToEnglish(text1.getText().toString()).equals("")) {

                                cash.setCashierName(convertToEnglish(user.getText().toString()));
                                cash.setCheckInDate(convertToEnglish(date.getText().toString()));
                                cash.setCategoryName(convertToEnglish(text.getText().toString()));
                                cash.setCategoryValue(Double.parseDouble(convertToEnglish(text.getTag().toString())));
                                cash.setCategoryQty(Integer.parseInt(convertToEnglish(text1.getText().toString())));
                                cash.setOrderKind(0);
                                cashier.add(cash);
                            } else {
                                new Settings().makeText(Main.this, getResources().getString(R.string.some_qty_not));
                            }
                        }
                        mDHandler.addCashierInOut(cashier);
                        mDHandler.addClockInClockOut(clockInClockOut);
                        clockInSuccessful(times, dates); //this for Successful clockIn

                        dialogCashierIn.dismiss();
                    } else {
                        AlertDialog.Builder builderInner = new AlertDialog.Builder(Main.this);
                        builderInner.setTitle(R.string.cashier_in_zero);
                        builderInner.setCancelable(false);
                        builderInner.setPositiveButton(getResources().getString(R.string.yes), (dialog1, which1) -> {
                            for (int i = 0; i < money.size(); i++) {
                                Cashier cash = new Cashier();
                                TableRow tableRow = (TableRow) categories.getChildAt(i);
                                TextView text = (TextView) tableRow.getChildAt(0);
                                TextView text1 = (TextView) tableRow.getChildAt(1);

                                if (!text1.getText().toString().equals("")) {

                                    cash.setCashierName(convertToEnglish(user.getText().toString()));
                                    cash.setCheckInDate(convertToEnglish(date.getText().toString()));
                                    cash.setCategoryName(convertToEnglish(text.getText().toString()));
                                    cash.setCategoryValue(Double.parseDouble(text.getTag().toString()));
                                    cash.setCategoryQty(Integer.parseInt(convertToEnglish(text1.getText().toString())));
                                    cash.setOrderKind(0);
                                    cashier.add(cash);
                                } else {
                                    new Settings().makeText(Main.this, getResources().getString(R.string.some_qty_not));
                                }
                            }
                            mDHandler.addCashierInOut(cashier);
                            dialogCashierIn.dismiss();

                            mDHandler.addClockInClockOut(clockInClockOut);
                            new Settings().makeText(Main.this, getResources().getString(R.string.save_successful));
                            clockInSuccessful(times, dates); //this for Successful clockIn
                        });
                        builderInner.setNegativeButton(getResources().getString(R.string.no), (dialog1, i) -> {
                            dialog1.dismiss();
                        });
                        builderInner.show();
                    }


                } else {
                    new Settings().makeText(Main.this, getResources().getString(R.string.add_money_category));
                    dialogCashierIn.dismiss();

                }
            }
        });


        for (int i = 0; i < money.size(); i++) {
            final int position = i;
            TableRow row = new TableRow(Main.this);
            TableLayout.LayoutParams lp = new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT);
            lp.setMargins(0, 10, 0, 5);
            row.setLayoutParams(lp);

            TextView textView = new TextView(Main.this);
            textView.setText(money.get(i).getCatName() + "   ");
            textView.setTag(money.get(i).getCatValue());
            textView.setGravity(Gravity.CENTER);
            textView.setTextColor(getResources().getColor(R.color.text_color));

            final TextView textView1 = new TextView(Main.this);
            textView1.setBackgroundColor(getResources().getColor(R.color.layer1));
            textView1.setHeight(26);
            textView1.setPadding(10, 0, 0, 0);
            textView1.setTextColor(getResources().getColor(R.color.text_color));
            textView1.setText("0");
            textView1.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View view) {
//                    if (focusedTextView != null) {
//                        if (focusedTextView.getText().toString().equals("")) {
//                            focusedTextView.setText("1");
//                        }
//                        TableRow tableRow = (TableRow) categories.getChildAt(Integer.parseInt(focusedTextView.getTag().toString()));
//                        TextView text = (TextView) tableRow.getChildAt(0);
//                        TextView text2 = (TextView) tableRow.getChildAt(2);
//                        int total = Integer.parseInt(text.getTag().toString()) * Integer.parseInt(focusedTextView.getText().toString());
//                        text2.setText("" + total);
//
//                        mainTotal.setText("0.000");
//                        for (int i = 0; i < money.size(); i++) {
//                            TableRow tRow = (TableRow) categories.getChildAt(i);
//                            TextView t = (TextView) tRow.getChildAt(2);
//                            mainTotal.setText("" +(Double.parseDouble(mainTotal.getText().toString())+ Double.parseDouble(t.getText().toString())));
//                        }
//
//                    }
                    if (focusedTextView != null && focusedTextView.getText().toString().equals("")) {
                        focusedTextView.setText("0");
                    }

                    focusedTextView = textView1;
                    focusedTextView.setTag("" + position);
                    focusedTextView.setText("");
                }
            });

            textView1.addTextChangedListener(new TextWatcher() {

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    if (focusedTextView != null) {
                        if (!focusedTextView.getText().toString().equals("")) {

                            TableRow tableRow = (TableRow) categories.getChildAt(Integer.parseInt(focusedTextView.getTag().toString()));
                            TextView text = (TextView) tableRow.getChildAt(0);
                            TextView text2 = (TextView) tableRow.getChildAt(2);

                            double total = Double.parseDouble(convertToEnglish(text.getTag().toString())) * Double.parseDouble(convertToEnglish(focusedTextView.getText().toString()));
                            text2.setText("" + total);
                        }

                        mainTotal.setText("0.000");
                        for (int i = 0; i < money.size(); i++) {
                            TableRow tRow = (TableRow) categories.getChildAt(i);
                            TextView t = (TextView) tRow.getChildAt(2);
                            mainTotal.setText("" + (Double.parseDouble(convertToEnglish(mainTotal.getText().toString())) + Double.parseDouble(convertToEnglish(t.getText().toString()))));
                        }

                    }
                }

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count,
                                              int after) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                }
            });


            TextView textView2 = new TextView(Main.this);
            textView2.setText("0");

            TableRow.LayoutParams lp2 = new TableRow.LayoutParams(130, TableRow.LayoutParams.MATCH_PARENT, 1.0f);
            lp2.setMargins(15, 0, 15, 0);
            textView.setLayoutParams(lp2);
            textView1.setLayoutParams(lp2);
            textView2.setLayoutParams(lp2);
            textView2.setGravity(Gravity.CENTER);
            textView2.setTextColor(getResources().getColor(R.color.text_color));

            row.addView(textView);
            row.addView(textView1);
            row.addView(textView2);

            categories.addView(row);
        }
        double totals = 0;
//        for (int i = 0; i < money.size(); i++) {
//            totals += money.get(i).getCatValue();
        mainTotal.setText("0.00");
//        }


        dialogCashierIn.show();

    }

    @SuppressLint("ClickableViewAccessibility")
    void showCashierOutDialog() {
        Dialog dialogCashierOut = new Dialog(Main.this);
        dialogCashierOut.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialogCashierOut.setCancelable(false);
        dialogCashierOut.setContentView(R.layout.cashier_out_dialog);
        dialogCashierOut.setCanceledOnTouchOutside(false);

//        Window window = dialogCashierOut.getWindow();
//        window.setLayout(920, 490);

        final ArrayList<Money> money = mDHandler.getAllMoneyCategory();

        categories = (TableLayout) dialogCashierOut.findViewById(R.id.money_categories);
        RadioGroup transType = dialogCashierOut.findViewById(R.id.transType);
        RadioButton finalClose = dialogCashierOut.findViewById(R.id.finalClose);
        RadioButton changeOver = dialogCashierOut.findViewById(R.id.changeOver);
        EditText toUser = dialogCashierOut.findViewById(R.id.toUser);
        final TextView cashTotals = (TextView) dialogCashierOut.findViewById(R.id.cashTotal);
        final TextView creditCard = (TextView) dialogCashierOut.findViewById(R.id.creditCard);
        final TextView cheque = (TextView) dialogCashierOut.findViewById(R.id.cheque);
        final TextView giftCard = (TextView) dialogCashierOut.findViewById(R.id.giftCard);
        final TextView credit = (TextView) dialogCashierOut.findViewById(R.id.credit);
        final TextView point = (TextView) dialogCashierOut.findViewById(R.id.point);
        final TextView otherPaymentTotal = (TextView) dialogCashierOut.findViewById(R.id.otherPaymentTotal);
        final TextView mainTotal = (TextView) dialogCashierOut.findViewById(R.id.mainTotal);
        final TextView user = (TextView) dialogCashierOut.findViewById(R.id.user);
        final TextView date = (TextView) dialogCashierOut.findViewById(R.id.date);
        user.setText(Settings.user_name);

        date.setText(today);

        final int[] tranType = {0};
        finalClose.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                tranType[0] = 0;
                toUser.setText("");
                toUser.setEnabled(true);
            }
        });
        changeOver.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                tranType[0] = 1;
                toUser.setEnabled(false);
            }
        });

        Button b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clear, save;
        b1 = (Button) dialogCashierOut.findViewById(R.id.b1);
        b2 = (Button) dialogCashierOut.findViewById(R.id.b2);
        b3 = (Button) dialogCashierOut.findViewById(R.id.b3);
        b4 = (Button) dialogCashierOut.findViewById(R.id.b4);
        b5 = (Button) dialogCashierOut.findViewById(R.id.b5);
        b6 = (Button) dialogCashierOut.findViewById(R.id.b6);
        b7 = (Button) dialogCashierOut.findViewById(R.id.b7);
        b8 = (Button) dialogCashierOut.findViewById(R.id.b8);
        b9 = (Button) dialogCashierOut.findViewById(R.id.b9);
        b0 = (Button) dialogCashierOut.findViewById(R.id.b0);
        clear = (Button) dialogCashierOut.findViewById(R.id.b_clear);
        save = (Button) dialogCashierOut.findViewById(R.id.save);

        b1.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "1");
            }
        });
        b2.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "2");
            }
        });
        b3.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "3");
            }
        });
        b4.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "4");
            }
        });
        b5.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "5");
            }
        });
        b6.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "6");
            }
        });
        b7.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "7");
            }
        });
        b8.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "8");
            }
        });
        b9.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "9");
            }
        });
        b0.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "0");
            }
        });
        clear.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                for (int i = 0; i < money.size(); i++) {
                    TableRow tableRow = (TableRow) categories.getChildAt(i);
                    TextView text1 = (TextView) tableRow.getChildAt(1);
                    TextView text2 = (TextView) tableRow.getChildAt(2);
                    text1.setText("0");
                    text2.setText("0");
                }
//                cashTotals.setText("0.000");
                creditCard.setText("0.00");
                cheque.setText("0.00");
                giftCard.setText("0.00");
                credit.setText("0.00");
                point.setText("0.00");
                otherPaymentTotal.setText("0.00");
                mainTotal.setText("0.00");

                toUser.setText("");
                toUser.setEnabled(false);
                finalClose.setChecked(true);
                changeOver.setChecked(false);
                tranType[0] = 0;

            }
        });
        save.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {

                if (!checkIsCashierInOutZero(money)) {
                    int tranType = 0;
                    if (finalClose.isChecked()) {
                        tranType = 0;
                    }
                    if (changeOver.isChecked()) {
                        tranType = 1;
                    }
                    saveCashierOutBase(categories, tranType, finalClose, changeOver, toUser, cashTotals, creditCard, cheque, giftCard,
                            credit, point, otherPaymentTotal, mainTotal, money, dialogCashierOut);

                    new Settings().makeText(Main.this, getResources().getString(R.string.save_successful));

                } else {

                    AlertDialog.Builder builderInner = new AlertDialog.Builder(Main.this);
                    builderInner.setTitle(getResources().getString(R.string.zero_cashier_q));
                    builderInner.setCancelable(false);
                    builderInner.setPositiveButton(getResources().getString(R.string.yes), (dialog1, which1) -> {

                        int tranType = 0;
                        if (finalClose.isChecked()) {
                            tranType = 0;
                        }
                        if (changeOver.isChecked()) {
                            tranType = 1;
                        }

                        saveCashierOutBase(categories, tranType, finalClose, changeOver, toUser, cashTotals, creditCard, cheque, giftCard,
                                credit, point, otherPaymentTotal, mainTotal, money, dialogCashierOut);

                        new Settings().makeText(Main.this, getResources().getString(R.string.save_successful));

                    });
                    builderInner.setNegativeButton(getResources().getString(R.string.no), (dialog1, i) -> {
                        dialog1.dismiss();
                    });
                    builderInner.show();

                }
            }
        });


        for (int i = 0; i < money.size(); i++) {
            final int position = i;
            TableRow row = new TableRow(Main.this);
            TableLayout.LayoutParams lp = new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT);
            lp.setMargins(0, 5, 0, 5);
            row.setLayoutParams(lp);

            TextView textView = new TextView(Main.this);
            textView.setText(money.get(i).getCatName() + "   ");
            textView.setTag(money.get(i).getCatValue());
            textView.setGravity(Gravity.CENTER);
            textView.setTextColor(getResources().getColor(R.color.text_color));

            final TextView textView1 = new TextView(Main.this);
            textView1.setBackgroundColor(getResources().getColor(R.color.layer1));
            textView1.setHeight(26);
            textView1.setPadding(10, 0, 0, 0);
            textView1.setTextColor(getResources().getColor(R.color.text_color));
            textView1.setText("0");
            textView1.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (focusedTextView != null && focusedTextView.getText().toString().equals("")) {
                        focusedTextView.setText("0");
                    }

                    focusedTextView = textView1;
                    focusedTextView.setTag("" + position);
                    focusedTextView.setText("");
                }
            });

            textView1.addTextChangedListener(new TextWatcher() {

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    if (focusedTextView != null) {
                        if (!focusedTextView.getText().toString().equals("")) {

                            TableRow tableRow = (TableRow) categories.getChildAt(Integer.parseInt(focusedTextView.getTag().toString()));
                            TextView text = (TextView) tableRow.getChildAt(0);
                            TextView text2 = (TextView) tableRow.getChildAt(2);

                            double total = Double.parseDouble(text.getTag().toString()) * Double.parseDouble(focusedTextView.getText().toString());
                            text2.setText("" + total);
                        }

                        cashTotals.setText("0.000");
                        for (int i = 0; i < money.size(); i++) {
                            TableRow tRow = (TableRow) categories.getChildAt(i);
                            TextView t = (TextView) tRow.getChildAt(2);
                            cashTotals.setText("" + (Double.parseDouble(cashTotals.getText().toString()) + Double.parseDouble(t.getText().toString())));
                        }
                        mainTotal.setText("" + (Double.parseDouble(cashTotals.getText().toString()) +
                                Double.parseDouble(otherPaymentTotal.getText().toString())));

                    }
                }

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count,
                                              int after) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                }
            });

            TextView textView2 = new TextView(Main.this);
            textView2.setText("0");

            TableRow.LayoutParams lp2 = new TableRow.LayoutParams(130, TableRow.LayoutParams.MATCH_PARENT, 1.0f);
            lp2.setMargins(15, 0, 15, 0);
            textView.setLayoutParams(lp2);
            textView1.setLayoutParams(lp2);
            textView2.setLayoutParams(lp2);
            textView2.setGravity(Gravity.CENTER);
            textView2.setTextColor(getResources().getColor(R.color.text_color));

            row.addView(textView);
            row.addView(textView1);
            row.addView(textView2);

            categories.addView(row);
        }
        double totals = 0;
//        for (int i = 0; i < money.size(); i++) {
//            totals += money.get(i).getCatValue();
        cashTotals.setText("0.00");
//        }

        //------------------------------------

        OnClickListener onClickListener = new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null && focusedTextView.getText().toString().equals("")) {
                    focusedTextView.setText("0");
                }
                focusedTextView = (TextView) view;
                focusedTextView.setText("");
            }
        };

        TextWatcher textWatcher = new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (focusedTextView != null) {
                    if (!focusedTextView.getText().toString().equals("")) {

                        double sum =
                                Double.parseDouble(creditCard.getText().toString()) +
                                        Double.parseDouble(cheque.getText().toString()) +
                                        Double.parseDouble(giftCard.getText().toString()) +
                                        Double.parseDouble(credit.getText().toString()) +
                                        Double.parseDouble(point.getText().toString());

                        otherPaymentTotal.setText("" + sum);
                        mainTotal.setText("" + (Double.parseDouble(cashTotals.getText().toString()) +
                                Double.parseDouble(otherPaymentTotal.getText().toString())));
                    }
                }
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count,
                                          int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        };

        creditCard.setOnClickListener(onClickListener);
        cheque.setOnClickListener(onClickListener);
        giftCard.setOnClickListener(onClickListener);
        credit.setOnClickListener(onClickListener);
        point.setOnClickListener(onClickListener);

        creditCard.addTextChangedListener(textWatcher);
        cheque.addTextChangedListener(textWatcher);
        giftCard.addTextChangedListener(textWatcher);
        credit.addTextChangedListener(textWatcher);
        point.addTextChangedListener(textWatcher);

        dialogCashierOut.show();


    }


    void showPayInDialog(final int transType) {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.pay_in_out_dialog);
        dialog.setCanceledOnTouchOutside(true);

//        Window window = dialog.getWindow();
//        window.setLayout(920, 490);

        final TextView tranType = (TextView) dialog.findViewById(R.id.trans_type);
        final TextView date = (TextView) dialog.findViewById(R.id.date);
        final TextView serial = (TextView) dialog.findViewById(R.id.trans);
        final TextView value = (TextView) dialog.findViewById(R.id.value);
        final TextView remark = (TextView) dialog.findViewById(R.id.remark);
        final Button save = (Button) dialog.findViewById(R.id.save);
        final Button exit = (Button) dialog.findViewById(R.id.exit);

        String signal = "";
        tranType.setText(transType == 0 ? getResources().getString(R.string.pay_in) : getResources().getString(R.string.pay_out));
        if (transType == 0) {
            signal = "";
        } else signal = "-";
        date.setText(today);

        ArrayList<Pay> pays = mDHandler.getAllPayInOut();
        serial.setText(pays.size() == 0 ? getResources().getString(R.string.trans_no) + " : " + "1" : getResources().getString(R.string.trans_no) + " : " + (pays.size() + 1));

        exit.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                dialog.dismiss();
            }
        });


        final ArrayList<Money> money = mDHandler.getAllMoneyCategory();

        categories = (TableLayout) dialog.findViewById(R.id.money_categories);
        final TextView mainTotal = (TextView) dialog.findViewById(R.id.mainTotal);
        final boolean[] flag = {true};
        value.setText("0");
        Button b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clear, dot;
        b1 = (Button) dialog.findViewById(R.id.b1);
        b2 = (Button) dialog.findViewById(R.id.b2);
        b3 = (Button) dialog.findViewById(R.id.b3);
        b4 = (Button) dialog.findViewById(R.id.b4);
        b5 = (Button) dialog.findViewById(R.id.b5);
        b6 = (Button) dialog.findViewById(R.id.b6);
        b7 = (Button) dialog.findViewById(R.id.b7);
        b8 = (Button) dialog.findViewById(R.id.b8);
        b9 = (Button) dialog.findViewById(R.id.b9);
        b0 = (Button) dialog.findViewById(R.id.b0);
//        clear = (Button) dialog.findViewById(R.id.b_clear);
        dot = (Button) dialog.findViewById(R.id.dot);

        b1.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "1");
            }
        });
        b2.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "2");
            }
        });
        b3.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "3");
            }
        });
        b4.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "4");
            }
        });
        b5.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "5");
            }
        });
        b6.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "6");
            }
        });
        b7.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "7");
            }
        });
        b8.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "8");
            }
        });
        b9.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "9");
            }
        });
        b0.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "0");
            }
        });
        value.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                flag2 = true;

                focusedTextView = value;
                focusedTextView.setText("");
                focusedTextView.setTag("*");

            }
        });
//        clear.setOnClickListener(new OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                for (int i = 0; i < money.size(); i++) {
//                    TableRow tableRow = (TableRow) categories.getChildAt(i);
//                    TextView text1 = (TextView) tableRow.getChildAt(1);
//                    TextView text2 = (TextView) tableRow.getChildAt(2);
//                    text1.setText("0");
//                    text2.setText("0");
//                    mainTotal.setText("0.00");
//                }
//                value.setText("0");
//            }
//        });


        dot.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (flag2)
                    focusedTextView.setText(focusedTextView.getText().toString() + ".");
                flag2 = false;
            }
        });
        String finalSignal = signal;
        save.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {

                Date currentTimeAndDate = Calendar.getInstance().getTime();
                SimpleDateFormat dfTime = new SimpleDateFormat("HH:mm:ss");
                String time = convertToEnglish(dfTime.format(currentTimeAndDate));
                Log.e("time123", "" + time);
                if (!value.getText().toString().equals("") && !mainTotal.getText().toString().equals("") && (Double.parseDouble(value.getText().toString()) != 0)) {
                    if (Double.parseDouble(value.getText().toString()) == Double.parseDouble(mainTotal.getText().toString())) {

                        //SAVE IN PAY_IN_OUT TABLE ...
                        if (!value.getText().toString().equals("")) {
                            mDHandler.addPayInOut(new Pay(transType, Settings.POS_number, Settings.user_no, Settings.user_name, today,
                                    Double.parseDouble(value.getText().toString()), remark.getText().toString(), Settings.shift_number,
                                    Settings.shift_name, time));
                            new Settings().makeText(Main.this, getResources().getString(R.string.save_successful));
                            dialog.dismiss();
                        }

                        //SAVE IN CASHIER_IN_OUT TABLE ...

                        ArrayList<Cashier> cashier = new ArrayList<>();
                        for (int i = 0; i < money.size(); i++) {
                            Cashier cash = new Cashier();
                            TableRow tableRow = (TableRow) categories.getChildAt(i);
                            TextView text = (TextView) tableRow.getChildAt(0);
                            TextView text1 = (TextView) tableRow.getChildAt(1);

                            if (!text1.getText().toString().equals("")) {

                                cash.setCashierName(Settings.user_name);
                                cash.setCheckInDate(date.getText().toString());
                                cash.setCategoryName(text.getText().toString());
                                cash.setCategoryValue(Double.parseDouble(finalSignal + text.getTag().toString()));
                                cash.setCategoryQty(Integer.parseInt(text1.getText().toString()));
                                cash.setOrderKind(2);/// 2 --> pay in / out   1 --> trans (order - refund ) / 0 --> cashier iN
                                cashier.add(cash);
                            } else {
                                new Settings().makeText(Main.this, getResources().getString(R.string.some_qty_not));
                            }
                        }
                        mDHandler.addCashierInOut(cashier);
                        dialog.dismiss();
                    } else
                        new Settings().makeText(Main.this, getResources().getString(R.string.total_from_cash_not_equal_value));
                } else
                    new Settings().makeText(Main.this, getResources().getString(R.string.ensure_your_input));
            }
        });


        for (int i = 0; i < money.size(); i++) {
            final int position = i;
            TableRow row = new TableRow(Main.this);
            TableLayout.LayoutParams lp = new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT);
            lp.setMargins(0, 10, 0, 5);
            row.setLayoutParams(lp);

            TextView textView = new TextView(Main.this);
            textView.setText(money.get(i).getCatName() + "   ");
            textView.setTag(money.get(i).getCatValue());
            textView.setGravity(Gravity.CENTER);
            textView.setTextColor(getResources().getColor(R.color.text_color));

            final TextView textView1 = new TextView(Main.this);
            textView1.setBackgroundColor(getResources().getColor(R.color.layer1));
            textView1.setHeight(26);
            textView1.setPadding(10, 0, 0, 0);
            textView1.setTextColor(getResources().getColor(R.color.text_color));
            textView1.setText("0");
            textView1.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (focusedTextView != null && focusedTextView.getText().toString().equals("")) {

                        focusedTextView.setText("0");
                    }
                    flag2 = true;
                    focusedTextView = textView1;
                    focusedTextView.setTag("" + position);
                    focusedTextView.setText("");
                }
            });

            textView1.addTextChangedListener(new TextWatcher() {

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                    if (focusedTextView != null) {
                        if (!focusedTextView.getText().toString().equals("") && !focusedTextView.getTag().toString().equals("*") && !focusedTextView.getText().toString().equals(".")) {

                            TableRow tableRow = (TableRow) categories.getChildAt(Integer.parseInt(focusedTextView.getTag().toString()));
                            TextView text = (TextView) tableRow.getChildAt(0);
                            TextView text2 = (TextView) tableRow.getChildAt(2);

                            double total = Double.parseDouble(text.getTag().toString()) * Double.parseDouble(focusedTextView.getText().toString());
                            text2.setText("" + total);
                        }

                        mainTotal.setText("0.000");
                        for (int i = 0; i < money.size(); i++) {
                            TableRow tRow = (TableRow) categories.getChildAt(i);
                            TextView t = (TextView) tRow.getChildAt(2);
                            mainTotal.setText("" + (Double.parseDouble(mainTotal.getText().toString()) + Double.parseDouble(t.getText().toString())));
                        }

                    }
                }

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count,
                                              int after) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                }
            });


            TextView textView2 = new TextView(Main.this);
            textView2.setText("0");

            TableRow.LayoutParams lp2 = new TableRow.LayoutParams(130, TableRow.LayoutParams.MATCH_PARENT, 1.0f);
            lp2.setMargins(15, 0, 15, 0);
            textView.setLayoutParams(lp2);
            textView1.setLayoutParams(lp2);
            textView2.setLayoutParams(lp2);
            textView2.setGravity(Gravity.CENTER);
            textView2.setTextColor(getResources().getColor(R.color.text_color));

            row.addView(textView);
            row.addView(textView1);
            row.addView(textView2);

            categories.addView(row);
        }
        double totals = 0;
//        for (int i = 0; i < money.size(); i++) {
//            totals += money.get(i).getCatValue();
        mainTotal.setText("0.00");
//        }


        dialog.show();

    }

    void showPayOutDialog() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.table_edit_outhorization_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        window.setLayout(920, 470);


        dialog.show();

    }

    void showSafeModeDialog() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.table_edit_outhorization_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        window.setLayout(920, 470);


        dialog.show();

    }

    void showCashDrawerDialog() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.table_edit_outhorization_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        window.setLayout(920, 470);


        dialog.show();

    }


    boolean checkIsCashierInOutZero(ArrayList<Money> money) {
        boolean isAllZero = true;
        for (int i = 0; i < money.size(); i++) {

            TableRow tableRow = (TableRow) categories.getChildAt(i);
            TextView text = (TextView) tableRow.getChildAt(1);
            TextView text1 = (TextView) tableRow.getChildAt(2);
//&& !text.getText().toString().equals("")// && !text1.getText().toString().equals("")
            if ((!text.getText().toString().equals("0")) && (!text1.getText().toString().equals("0"))) {
                isAllZero = false;
                break;
            }
        }

        return isAllZero;
    }


    void saveCashierOutBase(TableLayout categories, int tranType, RadioButton finalClose, RadioButton changeOver,
                            EditText toUser, TextView cashTotals, TextView creditCard, TextView cheque, TextView giftCard, TextView credit,
                            TextView point, TextView otherPaymentTotal, TextView mainTotal, ArrayList<Money> money, Dialog dialogCashierOut) {


        if (finalClose.isChecked() || (changeOver.isChecked() && !toUser.getText().toString().equals(""))) {
            ArrayList<OrderHeader> orderHeaders = mDHandler.getAllOrderHeader();
            ArrayList<PayMethod> payMethods = mDHandler.getAllExistingPay();

            int transNo = mDHandler.getAllBlindClose().size();

            Date currentTimeAndDate = Calendar.getInstance().getTime();
            SimpleDateFormat df = new SimpleDateFormat("HH:mm");
            String time = convertToEnglish(df.format(currentTimeAndDate));

            double userSales = Double.parseDouble(mainTotal.getText().toString());
            double sysSales = 0;
//                Log.e("tag***", "" + orderHeaders.get(0).getVoucherDate() + " == " + today + " && " + orderHeaders.get(0).getShiftName() + Settings.shift_name);

            for (int i = 0; i < orderHeaders.size(); i++)
                if (orderHeaders.get(i).getVoucherDate().equals(today) && orderHeaders.get(i).getShiftName().equals(Settings.shift_name))
                    sysSales += orderHeaders.get(i).getAmountDue();

            double userCash = Double.parseDouble(cashTotals.getText().toString());
            double sysCash = 0;
            for (int i = 0; i < payMethods.size(); i++)
                if (payMethods.get(i).getVoucherDate().equals(today) && payMethods.get(i).getShiftName().equals(Settings.shift_name)
                        && payMethods.get(i).getPayType().equals("Cash"))
                    sysCash += payMethods.get(i).getPayValue();

            double userOthers = Double.parseDouble(otherPaymentTotal.getText().toString());
            double sysOthers = 0;
            for (int i = 0; i < payMethods.size(); i++)
                if (payMethods.get(i).getVoucherDate().equals(today) && payMethods.get(i).getShiftName().equals(Settings.shift_name)
                        && !payMethods.get(i).getPayType().equals("Cash"))
                    sysOthers += payMethods.get(i).getPayValue();

            mDHandler.addBlindClose(new BlindClose(transNo, today, time, Settings.POS_number, Settings.shift_number,
                    Settings.shift_name, Settings.user_no, Settings.user_name, sysSales, userSales, userSales - sysSales,
                    sysCash, userCash, userCash - sysCash, sysOthers, userOthers, userOthers - sysOthers, 0, tranType,
                    "", toUser.getText().toString()));


            for (int i = 0; i < money.size(); i++) {
                TableRow tableRow = (TableRow) categories.getChildAt(i);
                TextView text = (TextView) tableRow.getChildAt(0);
                TextView text1 = (TextView) tableRow.getChildAt(1);

                String catName = text.getText().toString();
                Double catValue = Double.parseDouble(text.getTag().toString());
                int catQty;
                if (text1.getText().toString().equals(""))
                    catQty = 0;
                else
                    catQty = Integer.parseInt(text1.getText().toString());

                mDHandler.addBlindCloseDetails(new BlindCloseDetails(transNo, today, time, Settings.POS_number, Settings.shift_number,
                        Settings.shift_name, Settings.user_no, Settings.user_name, catName, catQty, catValue, catQty * catValue,
                        "Cash", "", "", -1, "no-user"));
            }

            double creditCardValue = 0.0;
            double chequeValue = 0.0;
            double giftCardValue = 0.0;
            double creditValue = 0.0;
            double pointValue = 0.0;
            if (!creditCard.getText().toString().equals("")) {
                creditCardValue = Double.parseDouble(creditCard.getText().toString());
            }
            if (!cheque.getText().toString().equals("")) {
                chequeValue = Double.parseDouble(cheque.getText().toString());
            }
            if (!giftCard.getText().toString().equals("")) {
                giftCardValue = Double.parseDouble(giftCard.getText().toString());
            }
            if (!credit.getText().toString().equals("")) {
                creditValue = Double.parseDouble(credit.getText().toString());
            }
            if (!point.getText().toString().equals("")) {
                pointValue = Double.parseDouble(point.getText().toString());
            }

            if (creditCardValue != 0)
                mDHandler.addBlindCloseDetails(new BlindCloseDetails(transNo, today, time, Settings.POS_number, Settings.shift_number,
                        Settings.shift_name, Settings.user_no, Settings.user_name, "Credit Card", 1, creditCardValue,
                        creditCardValue, "Credit Card", "", "", -1, "no-user"));

            if (chequeValue != 0)
                mDHandler.addBlindCloseDetails(new BlindCloseDetails(transNo, today, time, Settings.POS_number, Settings.shift_number,
                        Settings.shift_name, Settings.user_no, Settings.user_name, "Cheque", 1, chequeValue,
                        chequeValue, "Cheque", "", "", -1, "no-user"));

            if (giftCardValue != 0)
                mDHandler.addBlindCloseDetails(new BlindCloseDetails(transNo, today, time, Settings.POS_number, Settings.shift_number,
                        Settings.shift_name, Settings.user_no, Settings.user_name, "Gift Card", 1, giftCardValue,
                        giftCardValue, "Gift Card", "", "", -1, "no-user"));

            if (creditValue != 0)
                mDHandler.addBlindCloseDetails(new BlindCloseDetails(transNo, today, time, Settings.POS_number, Settings.shift_number,
                        Settings.shift_name, Settings.user_no, Settings.user_name, "Credit", 1, creditValue,
                        creditValue, "Credit", "", "", -1, "no-user"));

            if (pointValue != 0)
                mDHandler.addBlindCloseDetails(new BlindCloseDetails(transNo, today, time, Settings.POS_number, Settings.shift_number,
                        Settings.shift_name, Settings.user_no, Settings.user_name, "Point", 1, pointValue,
                        pointValue, "Point", "", "", -1, "no-user"));

            dialogCashierOut.dismiss();
        } else
            new Settings().makeText(Main.this, getResources().getString(R.string.to_user_field));


        mDHandler.updateStatusInBlindShiftIn(Settings.user_name, today);
        dialogCashierOut.dismiss();
        finish();
        Intent logInActivate = new Intent(Main.this, LogIn.class);
        startActivity(logInActivate);

    }


    void showClockInClockOutDialog() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.clockin_clockout_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        // window.setLayout(410, 510);

        final TextView value = (TextView) dialog.findViewById(R.id.text);

        focusedTextView = value;

        Button b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, clear, ok;
        b1 = (Button) dialog.findViewById(R.id.b1);
        b2 = (Button) dialog.findViewById(R.id.b2);
        b3 = (Button) dialog.findViewById(R.id.b3);
        b4 = (Button) dialog.findViewById(R.id.b4);
        b5 = (Button) dialog.findViewById(R.id.b5);
        b6 = (Button) dialog.findViewById(R.id.b6);
        b7 = (Button) dialog.findViewById(R.id.b7);
        b8 = (Button) dialog.findViewById(R.id.b8);
        b9 = (Button) dialog.findViewById(R.id.b9);
        b0 = (Button) dialog.findViewById(R.id.b0);
        clear = (Button) dialog.findViewById(R.id.b_clear);
        ok = (Button) dialog.findViewById(R.id.okay);


        b1.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "1");
            }
        });
        b2.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "2");
            }
        });
        b3.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "3");
            }
        });
        b4.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "4");
            }
        });
        b5.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "5");
            }
        });
        b6.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "6");
            }
        });
        b7.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "7");
            }
        });
        b8.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "8");
            }
        });
        b9.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "9");
            }
        });
        b0.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "0");
            }
        });
        clear.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                focusedTextView.setText("");
            }
        });

        ok.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!focusedTextView.getText().toString().equals("")) {
                    if (String.valueOf(Settings.password).equals(focusedTextView.getText().toString())) {

                        int Size = mDHandler.getAllExistingClockInClockOut().size() - 1;
                        String TransType;
                        if (mDHandler.getAllExistingClockInClockOut().size() > 0)
                            TransType = mDHandler.getAllExistingClockInClockOut().get(Size).getTranstype();
                        else
                            TransType = "ClockOut";

                        switch (TransType) {
                            case "ClockOut":
                                dialog.dismiss();
                                showTimeCardDialog();
                                break;
                            case "ClockIN":
                                dialog.dismiss();
                                clockTimeOut();
                                break;
                            case "BreakOut":
                                dialog.dismiss();
                                clockTimeOut();
                                break;
                            case "BreakIN":
                                dialog.dismiss();
                                showBreakTimeOut();
                                break;
                        }
                    } else {
                        new Settings().makeText(Main.this, getResources().getString(R.string.insert_correct_password));
                        focusedTextView.setText("");
                    }
                } else {
                    new Settings().makeText(Main.this, getResources().getString(R.string.enter_your_password));
                }
            }
        });

        dialog.show();
    }

    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
    void showTimeCardDialog() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.time_card_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        // window.setLayout(590, 390);


        Button clockIn;
        final TextView date, username;
        final EditText remark;
        clockIn = (Button) dialog.findViewById(R.id.clockin);

        final TextClock time = (TextClock) dialog.findViewById(R.id.horas);
        date = (TextView) dialog.findViewById(R.id.date1);
        username = (TextView) dialog.findViewById(R.id.username);

        remark = (EditText) dialog.findViewById(R.id.remark);

        SystemClock.elapsedRealtime();

//        final Date currentTimeAndDate = Calendar.getInstance().getTime();
//        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
//        final String today = df.format(currentTimeAndDate);
        date.setText(today);
        username.setText(Settings.user_name);

        clockIn.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
                final String times = convertToEnglish(time.getText().toString());

                Settings.time_card = 1;

                ClockInClockOut clockInClockOut = new ClockInClockOut();

                clockInClockOut.setPointOfSaleNumber(Settings.POS_number);
                clockInClockOut.setDate(today);
                clockInClockOut.setUserNO(Settings.user_no);
                clockInClockOut.setUserName(Settings.user_name);
                clockInClockOut.setTranstype("ClockIN");
                clockInClockOut.setDateCard(today);
                clockInClockOut.setTimeCard(times);
                clockInClockOut.setRemark((remark.getText().toString()));
                clockInClockOut.setShiftNo(Settings.shift_number);
                clockInClockOut.setShiftName(Settings.shift_name);


//                mDHandler.addClockInClockOut(clockInClockOut); // this in cashierInDialog ...

                showCashierInDialog(times, today, clockInClockOut);
            }
        });

        dialog.show();
    }

    void clockInSuccessful(String times, String dates) {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.clockin_successful_dialog);
        dialog.setCanceledOnTouchOutside(false);

        Window window = dialog.getWindow();
        // window.setLayout(590, 290);

        TextView masege, time, date;

        masege = (TextView) dialog.findViewById(R.id.clockinsuccessfull);
        time = (TextView) dialog.findViewById(R.id.time2);
        date = (TextView) dialog.findViewById(R.id.date2);
        masege.setText(getResources().getString(R.string.clockinsuccessful) + "(" + Settings.user_name + ")");
        Button ok = (Button) dialog.findViewById(R.id.ok1);

        time.setText(convertToEnglish(times));
        date.setText(convertToEnglish(dates));

        ok.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.show();

    }

    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
    void clockTimeOut() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.time_card_out_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        // window.setLayout(590, 390);

        Button clockOut, breakIN;
        TextView userNameOut, date;
        final TextClock time;
        final EditText remarkOut;

        clockOut = (Button) dialog.findViewById(R.id.clock_out);
        breakIN = (Button) dialog.findViewById(R.id.break_in);
        remarkOut = (EditText) dialog.findViewById(R.id.remark3);
        userNameOut = (TextView) dialog.findViewById(R.id.username1);
        userNameOut.setText(Settings.user_name);

        time = (TextClock) dialog.findViewById(R.id.horas1);
        date = (TextView) dialog.findViewById(R.id.date3);

//        final Date currentTimeAndDate = Calendar.getInstance().getTime();
//        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
//        final String today = df.format(currentTimeAndDate);
        date.setText(today);


        clockOut.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                Settings.time_card = 0;
                final String times = convertToEnglish(time.getText().toString());
                ClockInClockOut clockInClockOut = new ClockInClockOut();

                clockInClockOut.setPointOfSaleNumber(Settings.POS_number);
                clockInClockOut.setDate(today);
                clockInClockOut.setUserNO(Settings.user_no);
                clockInClockOut.setUserName(Settings.user_name);
                clockInClockOut.setTranstype("ClockOut");
                clockInClockOut.setDateCard(today);
                clockInClockOut.setTimeCard(times);
                clockInClockOut.setRemark((remarkOut.getText().toString()));
                clockInClockOut.setShiftNo(Settings.shift_number);
                clockInClockOut.setShiftName(Settings.shift_name);


                mDHandler.addClockInClockOut(clockInClockOut);
                showCashierOutDialog();

                dialog.dismiss();

            }
        });
        breakIN.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                Settings.time_card = 2;
                final String times = convertToEnglish(time.getText().toString());
                ClockInClockOut clockInClockOut = new ClockInClockOut();

                clockInClockOut.setPointOfSaleNumber(Settings.POS_number);
                clockInClockOut.setDate(today);
                clockInClockOut.setUserNO(Settings.user_no);
                clockInClockOut.setUserName(Settings.user_name);
                clockInClockOut.setTranstype("BreakIN");
                clockInClockOut.setDateCard(today);
                clockInClockOut.setTimeCard(times);
                clockInClockOut.setRemark((remarkOut.getText().toString()));
                clockInClockOut.setShiftNo(Settings.shift_number);
                clockInClockOut.setShiftName(Settings.shift_name);

                mDHandler.addClockInClockOut(clockInClockOut);

                dialog.dismiss();
            }
        });

        dialog.show();

    }

    public String convertToEnglish(String value) {
        String newValue = (((((((((((value + "").replaceAll("١", "1")).replaceAll("٢", "2")).replaceAll("٣", "3")).replaceAll("٤", "4")).replaceAll("٥", "5")).replaceAll("٦", "6")).replaceAll("٧", "7")).replaceAll("٨", "8")).replaceAll("٩", "9")).replaceAll("٠", "0").replaceAll("٫", "."));
        return newValue;
    }

    public void openRefundDialog2() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.refund_invoice);
        dialog.setCanceledOnTouchOutside(false);

        final EditText vhfNo;
        final TextView posNo, originalDate, originalTime, tableNo, customer;
        Button show, done, exit;
        lineDiscount = new ArrayList<>();
        DiscountArray = new ArrayList<>();

        final boolean[] flag = {true};
        final ArrayList<String> inVoucher = new ArrayList<>();
        orderTransactions = new ArrayList<>();
        rowRefund = new ArrayList<>();

        final boolean[] check = {false};

        refundTables = (TableLayout) dialog.findViewById(R.id.Table);
        table = (TableLayout) dialog.findViewById(R.id.table);
        vhfNo = (EditText) dialog.findViewById(R.id.VHF_NO);
        final String[] VHF_NO = new String[1];
        posNo = (TextView) dialog.findViewById(R.id.pos_NO);
        originalDate = (TextView) dialog.findViewById(R.id.VhfDate);
        originalTime = (TextView) dialog.findViewById(R.id.vhfTime);
        tableNo = (TextView) dialog.findViewById(R.id.tableNO);
        customer = (TextView) dialog.findViewById(R.id.customer);

        show = (Button) dialog.findViewById(R.id.bu_show);
        done = (Button) dialog.findViewById(R.id.bu_ok);
        exit = (Button) dialog.findViewById(R.id.bu_exit);


        posNo.setText(String.valueOf(Settings.POS_number));
        TextView total, discount, netTotal;
        total = dialog.findViewById(R.id.total_);
        discount = dialog.findViewById(R.id.discount);
        netTotal = dialog.findViewById(R.id.net_total);


        show.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                refundTables.removeAllViews();
                orderTransactions.clear();
                textId = 0;
                VHF_NO[0] = convertToEnglish(vhfNo.getText().toString());
                inVoucher.add(VHF_NO[0]);
                orderTransactions = mDHandler.getAllRequestVoucher(VHF_NO[0], String.valueOf(Settings.POS_number));
                ArrayList<OrderTransactions> orderTransactions1 = new ArrayList<>();
                List<String> item_ = new ArrayList<>();
                if (!orderTransactions.isEmpty()) {
                    originalDate.setText(orderTransactions.get(0).getVoucherDate());
                    originalTime.setText(orderTransactions.get(0).getTime());
                    if (orderTransactions.get(0).getTableNo() != -1) {
                        tableNo.setText(String.valueOf(orderTransactions.get(0).getTableNo()));
                    } else {
                        tableNo.setText("-");
                    }
                    customer.setText("customer");

                    for (int i = 0; i < orderTransactions.size(); i++) {
                        double qty_ = orderTransactions.get(i).getQty() + orderTransactions.get(i).getReturnQty();
                        if ((qty_) != 0) {
                            orderTransactions1.add(orderTransactions.get(i));
                        }
                    }

                    orderTransactions.clear();
                    orderTransactions = orderTransactions1;

                    if (orderTransactions.size() == 0)
                        notCorrectValueDialog(getString(R.string.cannot_return));

                    for (int i = 0; i < orderTransactions.size(); i++) {//if
                        insertRow(orderTransactions.get(i).getVoucherSerial(), orderTransactions.get(i).getItemName(), orderTransactions.get(i).getQty() + orderTransactions.get(i).getReturnQty(), orderTransactions, refundTables, total, discount, netTotal);

                    }
                    flag[0] = false;
                } else {
                    new Settings().makeText(Main.this, getResources().getString(R.string.invoice_no_not_found));
                }

                vhfNo.setText("");
            }
        });

        done.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

                int textData;

                for (int i = 0; i < orderTransactions.size(); i++) {
                    text = dialog.findViewById(Integer.parseInt(i + "" + 5));
                    String textCheak = text.getText().toString();
                    if (textCheak.equals("-1")) {
                        CheckTrue = false;
                        break;
                    }
                }

                Log.e("out 000", " " + CheckTrue + "  netTotals" + netTotals);
                if (Double.parseDouble(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + netTotals))))) != 0.0 && CheckTrue) {
                    Log.e("in  000", " " + CheckTrue);
                    int index = 0;
                    for (int i = 0; i < orderTransactions.size(); i++) {
                        text = dialog.findViewById(Integer.parseInt(i + "3"));
                        if (!text.getText().toString().equals("")) {
                            textData = Integer.parseInt(text.getText().toString());
                            rowRefund.add(orderTransactions.get(i));
                            double q = orderTransactions.get(i).getQty();
                            double oldTotal = orderTransactions.get(i).getTotal();
                            rowRefund.get(index).setQty(Double.parseDouble("-" + textData));
                            double lDiscon = orderTransactions.get(i).getlDiscount();
                            rowRefund.get(index).setTotal(textData * (orderTransactions.get(i).getPrice()));
                            rowRefund.get(index).setlDiscount(textData * (lDiscon / q));
                            rowRefund.get(index).setDiscount(textData * (orderTransactions.get(i).getDiscount() / q));
                            rowRefund.get(index).setTaxValue(textData * (orderTransactions.get(i).getTaxValue() / q));
                            rowRefund.get(index).setService(rowRefund.get(index).getTotal() * (orderTransactions.get(i).getService() / oldTotal));
                            if (orderTransactions.get(i).getService() == 0) {
                                rowRefund.get(index).setServiceTax(rowRefund.get(index).getService() * (orderTransactions.get(i).getServiceTax() / 1));
                            } else {
                                rowRefund.get(index).setServiceTax(rowRefund.get(index).getService() * (orderTransactions.get(i).getServiceTax() / orderTransactions.get(i).getService()));
                            }

                            rowRefund.get(index).setOrderKind(1);

                            index++;
                            Log.e("taxRefund ", "=" + textData * (lDiscon / q) + "linD/" +
                                    textData * (orderTransactions.get(i).getDiscount() / q) + "Dic/" +
                                    textData * (orderTransactions.get(i).getTaxValue() / q) + "tax/" +
                                    textData * (orderTransactions.get(i).getService() / q) + "srvice/" +
                                    1);
                        } else {
                            textData = 0;
                        }

                    }
                    textId = 0;
                    CheckTrue = true;
                    dialog.dismiss();
                    payMethodRefund2(orderTransactions, VHF_NO[0]);

                }

            }
        });

        exit.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                textId = 0;
                netTotals = 0.0;
                dialog.dismiss();
            }
        });

        dialog.show();

    }


    void insertRow(int serial, String itemName, final double qty, final ArrayList<OrderTransactions> list, final TableLayout recipeTable, TextView totalText, TextView DiscountText, TextView nettotalText) {

        final TableRow row = new TableRow(Main.this);
        final double[] rTotal = {0.0};
        TableRow.LayoutParams lp = new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT);
        row.setLayoutParams(lp);
        data = "0";

        for (int i = 0; i < 6; i++) {
            final EditText editText = new EditText(Main.this);
            final TextView textView = new TextView(Main.this);
            if (i == 3) {
                editText.setTextColor(ContextCompat.getColor(Main.this, R.color.text_color));
                editText.setGravity(Gravity.CENTER);
                editText.setInputType(InputType.TYPE_CLASS_NUMBER);
                TableRow.LayoutParams lp2 = new TableRow.LayoutParams(100, TableRow.LayoutParams.WRAP_CONTENT, 1.0f);
                editText.setLayoutParams(lp2);
                editText.setId(Integer.parseInt(textId + "3"));
                row.setId(textId);
                row.addView(editText);

                editText.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {

                        totalAdd = 0.0;
                        discountAdd = 0.0;
                        netTotals = 0.0;
                        double taxValue = 0.0;

                        for (int i = 0; i < recipeTable.getChildCount(); i++) {
                            TableRow rowTemp = (TableRow) recipeTable.getChildAt(i);
                            TextView oldQty = (TextView) rowTemp.getChildAt(2);
                            TextView rQty = (TextView) rowTemp.getChildAt(3);
                            TextView rTotals = (TextView) rowTemp.getChildAt(4);
                            TextView isGrater = (TextView) rowTemp.getChildAt(5);

                            rTotal[0] = 0.0;
                            if (!rQty.getText().toString().equals("")) {
                                if (Double.parseDouble(rQty.getText().toString()) <= Double.parseDouble(oldQty.getText().toString())
                                        && Double.parseDouble(rQty.getText().toString()) > 0) {
                                    rows = row;
                                    rows.setBackgroundColor(getResources().getColor(R.color.layer3));
                                    rTotal[0] = ((Double.parseDouble(rQty.getText().toString())) * list.get(i).getPrice());
                                    rTotals.setText(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + rTotal[0])))));
                                    isGrater.setText("0");
                                    CheckTrue = true;

                                    Log.e("in 22", "list.get(i).getQty() =" + list.get(i).getQty() + "\n list.get(i).getDiscount()" + list.get(i).getDiscount() + "\n list.get(i).getlDiscount()" + list.get(i).getlDiscount());

                                    totalAdd += Double.parseDouble(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish(rTotals.getText().toString())))));
                                    if (Double.parseDouble(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish(rTotals.getText().toString()))))) != 0.0 && !convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish(rQty.getText().toString())))).equals("")) {
                                        discountAdd += ((list.get(i).getDiscount() / list.get(i).getQty()) + (list.get(i).getlDiscount() / list.get(i).getQty())) * Double.parseDouble(rQty.getText().toString());
                                        taxValue += ((list.get(i).getTaxValue() / list.get(i).getQty())) * Double.parseDouble(rQty.getText().toString());

                                    } else {
                                        discountAdd += 0.0;
                                        taxValue += 0.0;
                                    }

                                    if (Settings.tax_type == 0) {
                                        netTotals = Double.parseDouble(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + (totalAdd - discountAdd))))));
                                    } else {
                                        netTotals = Double.parseDouble(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + (totalAdd + taxValue - (discountAdd)))))));
                                    }

                                    Log.e("in 33", "netTotals = " + netTotals + "\n taxValue =" + taxValue + "\n discountAdd= " + discountAdd);

                                    balance = netTotals;
                                    totalText.setText(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + totalAdd)))));

                                    DiscountText.setText(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + discountAdd)))));

                                    nettotalText.setText(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish("" + netTotals)))));

                                } else {
                                    notCorrectValueDialog(getResources().getString(R.string.this_value_not_correct));
                                    rows = row;
                                    rows.setBackgroundColor(getResources().getColor(R.color.exit_hover));
                                    rTotals.setText("0.0");
                                    isGrater.setText("-1");
                                    Log.e("in 44", "");
                                }
                            } else {
                                rTotals.setText("0.0");
                            }

                        }


                    }

                    @Override
                    public void afterTextChanged(Editable s) {


                    }
                });

            } else if (i == 5) {
                textView.setId(Integer.parseInt(textId + "" + i));
                textView.setText("0");
                TableRow.LayoutParams lp2 = new TableRow.LayoutParams(0, TableRow.LayoutParams.WRAP_CONTENT);
                textView.setLayoutParams(lp2);
                row.addView(textView);
            } else {
                switch (i) {
                    case 0:
                        textView.setText("" + serial);
                        break;
                    case 1:
                        textView.setText(itemName);
                        break;
                    case 2:
                        textView.setText("" + qty);
                        break;
                    case 4:
                        textView.setText("0.0");
                        break;

                }

                textView.setTextColor(ContextCompat.getColor(Main.this, R.color.text_color));
                textView.setGravity(Gravity.CENTER);

                textView.setId(Integer.parseInt(textId + "" + i));

                TableRow.LayoutParams lp2 = new TableRow.LayoutParams(100, TableRow.LayoutParams.WRAP_CONTENT, 1.0f);
                textView.setLayoutParams(lp2);


                row.addView(textView);

            }

        }
        row.setId(textId);
        recipeTable.addView(row);
        textId++;

    }


    public void payMethodRefund2(final ArrayList<OrderTransactions> list, final String VHF_NO) {
        Dialog PayRefund = new Dialog(Main.this);
        PayRefund.requestWindowFeature(Window.FEATURE_NO_TITLE);
        PayRefund.setCancelable(false);
        PayRefund.setContentView(R.layout.pay_method_refund);
        PayRefund.setCanceledOnTouchOutside(false);


        final boolean[] ifGraterThan = {false};

        Button b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, dot, save, exit;
        b1 = (Button) PayRefund.findViewById(R.id.b1);
        b2 = (Button) PayRefund.findViewById(R.id.b2);
        b3 = (Button) PayRefund.findViewById(R.id.b3);
        b4 = (Button) PayRefund.findViewById(R.id.b4);
        b5 = (Button) PayRefund.findViewById(R.id.b5);
        b6 = (Button) PayRefund.findViewById(R.id.b6);
        b7 = (Button) PayRefund.findViewById(R.id.b7);
        b8 = (Button) PayRefund.findViewById(R.id.b8);
        b9 = (Button) PayRefund.findViewById(R.id.b9);
        b0 = (Button) PayRefund.findViewById(R.id.b0);
        dot = (Button) PayRefund.findViewById(R.id.dot);
        save = (Button) PayRefund.findViewById(R.id.save);
        exit = (Button) PayRefund.findViewById(R.id.exits);

        nettotal = (TextView) PayRefund.findViewById(R.id.nettotal);
        cashValues = 0.0;
        creditValues = 0.0;
        chequeVales = 0.0;
        pointValues = 0.0;
        giftCardValues = 0.0;
        cardValues = 0.0;

//        focusedTextView = cashValue;
        TableLayout tableLayout = PayRefund.findViewById(R.id.re_table);

        ArrayList<PayMethod> AllPayType = new ArrayList();
        AllPayType = mDHandler.getAllRequestPayMethod(VHF_NO, String.valueOf(Settings.POS_number));

        for (int l_list = 0; l_list < AllPayType.size(); l_list++) {
            insertPayTypeForThisVhf(AllPayType.get(l_list).getPayType(), String.valueOf(AllPayType.get(l_list).getPayValue()), tableLayout);
        }
        b1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "1");
                }
            }
        });
        b2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "2");
                }
            }
        });
        b3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "3");
                }
            }
        });
        b4.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "4");
                }
            }
        });
        b5.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "5");
                }
            }
        });
        b6.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null)
                    focusedTextView.setText(focusedTextView.getText().toString() + "6");
            }
        });
        b7.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "7");
                }
            }
        });
        b8.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "8");
                }
            }
        });
        b9.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "9");
                }
            }
        });
        b0.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    focusedTextView.setText(focusedTextView.getText().toString() + "0");
                }
            }
        });
        dot.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (focusedTextView != null) {
                    if (flag)
                        focusedTextView.setText(focusedTextView.getText().toString() + ".");
                    flag = false;
                }
            }
        });
        ArrayList<PayMethod> finalAllPayType = AllPayType;
        save.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                ifGraterThan[0] = false;

//                int transactionsSize = mDHandler.getMaxSerial("ORDER_HEADER","1")+1;
                List<MaxSerial> max = new ArrayList<>();
                max = mDHandler.getMaxSerialForVhf();
                int transactionsSize = 0;
                if (max.size() != 0) {
                    transactionsSize = Integer.parseInt(mDHandler.getMaxSerialForVhf().get(0).getMaxSerialRefund()) + 1;
                } else {
                    MaxSerial maxN = new MaxSerial("0", "0");
                    mDHandler.addMAXSerial(maxN);
                    transactionsSize = 1;
                }

                Log.e("size of return = ", "" + transactionsSize);

                Date currentTimeAndDate = Calendar.getInstance().getTime();
                SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                SimpleDateFormat Tf = new SimpleDateFormat("HH:mm:ss");
                String today = df.format(currentTimeAndDate);
                String times = Tf.format(currentTimeAndDate);
                for (int i = 0; i < tableLayout.getChildCount(); i++) {
                    TableRow rowTemp = (TableRow) tableLayout.getChildAt(i);
                    TextView isGrater_o = (TextView) rowTemp.getChildAt(2);

                    if (isGrater_o.getText().toString().equals("1")) {
                        ifGraterThan[0] = true;
                        break;
                    }

                }


                cashValues = 0.0;
                creditValues = 0.0;
                chequeVales = 0.0;
                pointValues = 0.0;
                giftCardValues = 0.0;
                cardValues = 0.0;
                if (Double.parseDouble(convertToEnglish(threeDForm.format(Double.parseDouble(convertToEnglish(nettotal.getText().toString()))))) == 0) {
                    if (!ifGraterThan[0]) {
                        for (int i = 0; i < tableLayout.getChildCount(); i++) {
                            TableRow rowTemp = (TableRow) tableLayout.getChildAt(i);
                            TextView name_o = (TextView) rowTemp.getChildAt(0);
                            TextView value_o = (TextView) rowTemp.getChildAt(1);

                            if (!value_o.getText().toString().equals("")) {
                                if (name_o.getText().toString().equals("Cash") && Double.parseDouble(value_o.getText().toString()) != 0) {
                                    Cashier cashier = new Cashier();
                                    ArrayList<Cashier> cashiersList = new ArrayList<Cashier>();
                                    cashier.setCashierName(Settings.user_name);
                                    cashier.setCategoryName("null");
                                    cashier.setCategoryQty(-1);
                                    cashier.setCategoryValue(Double.parseDouble(value_o.getText().toString()));
                                    cashier.setCheckInDate(today);
                                    cashier.setOrderKind(1);

                                    cashiersList.add(cashier);

                                    mDHandler.addCashierInOut(cashiersList);
                                }
                            }


                            if (name_o.getText().toString().contains("Cheque") && !value_o.getText().toString().equals("")) {
                                if (Double.parseDouble(value_o.getText().toString()) != 0) {
                                    chequeVales = Double.parseDouble(value_o.getText().toString());
                                } else {
                                    chequeVales = 0.0;
                                }
                            }
                            Log.e("chequeVales", "-->" + chequeVales + "\n");

                            if (name_o.getText().toString().contains("Cash") && !value_o.getText().toString().equals("")) {
                                if (Double.parseDouble(value_o.getText().toString()) != 0) {
                                    cashValues = Double.parseDouble(value_o.getText().toString());
                                } else {
                                    cashValues = 0.0;
                                }
                                Log.e("chequeVales", "-->" + cashValues + "\n");
                            }

                            if (name_o.getText().toString().contains("Gift") && !value_o.getText().toString().equals("")) {
                                if (Double.parseDouble(value_o.getText().toString()) != 0) {
                                    giftCardValues = Double.parseDouble(value_o.getText().toString());
                                } else {
                                    giftCardValues = 0.0;
                                }
                                Log.e("giftCardValues", "-->" + giftCardValues + "\n");
                            }

                            if (name_o.getText().toString().contains("Point") && !value_o.getText().toString().equals("")) {
                                if (Double.parseDouble(value_o.getText().toString()) != 0) {
                                    pointValues = Double.parseDouble(value_o.getText().toString());
                                } else {
                                    pointValues = 0.0;
                                }
                                Log.e("pointValues", "-->" + pointValues + "\n");
                            }

                            if ((name_o.getText().toString().contains("v") || name_o.getText().toString().contains("V") || name_o.getText().toString().contains("m") || name_o.getText().toString().contains("M")) && !value_o.getText().toString().equals("")) {
                                if (Double.parseDouble(value_o.getText().toString()) != 0) {
                                    creditValues += Double.parseDouble(value_o.getText().toString());
                                }
                                Log.e("creditValues", "-->" + creditValues + "\n");
                            }

                        }

                        ArrayList<PayMethod> payObj = new ArrayList();


                        double total = 0.0, lineDic = 0.0, dic = 0.0, service = 0.0, tax = 0.0, netTotal1 = 0.0, serviceTax = 0.0;
                        for (int p = 0; p < rowRefund.size(); p++) {

                            total += rowRefund.get(p).getTotal();
                            lineDic += rowRefund.get(p).getlDiscount();
                            dic += rowRefund.get(p).getDiscount();
                            service += rowRefund.get(p).getService();
                            serviceTax += rowRefund.get(p).getServiceTax();
                            tax += rowRefund.get(p).getTaxValue();
                        }

                        if (Settings.tax_type == 0) {
                            netTotal1 = total - (lineDic + dic) + service + serviceTax;//+ service
                            Log.e("refound ", "==>" + total + " -" + "(" + lineDic + "+" + dic + "+" + service + "+" + serviceTax + ")");
                        } else {
                            netTotal1 = total + tax - (lineDic + dic) + service + serviceTax;//+ service
                            Log.e("refound ", "==>" + total + " -" + "(" + lineDic + "+" + dic + "+" + service + "+" + tax + ")");
                        }

                        double subTotalValue = Double.parseDouble(convertToEnglish((total - (lineDic + dic)) + ""));


                        String waiterName = "";
                        if (rowRefund.get(0).getOrderType() == 0) {
                            waiterName = "No Waiter";
                        } else {
                            waiterName = mDHandler.getAllRequestVoucherHeader(VHF_NO, String.valueOf(Settings.POS_number));
                        }


                        OrderHeader orderHeader;
                        orderHeader = new OrderHeader(rowRefund.get(0).getOrderType(), 1, convertToEnglish(today), Settings.POS_number, Settings.store_number,
                                String.valueOf(transactionsSize), 1, -1 * totalAdd, -1 * lineDic, -1 * dic, -1 * (lineDic + dic),
                                -1 * service, -1 * tax, -1 * serviceTax, -1 * subTotalValue,
                                -1 * netTotal1, 0, rowRefund.get(0).getTableNo(),
                                rowRefund.get(0).getSectionNo(), -1 * cashValues, -1 * creditValues, -1 * chequeVales, -1 * cardValues,
                                -1 * giftCardValues, -1 * pointValues, Settings.shift_name, Settings.shift_number, waiterName, 0, Settings.user_name, Settings.user_no, convertToEnglish(times), rowRefund.get(0).getVoucherNo(), rowRefund.get(0).getPosNo(), Settings.cash_no);
                        mDHandler.addOrderHeader(orderHeader);

                        for (int i = 0; i < rowRefund.size(); i++) {
                            OrderTransactions orderTransactions = new OrderTransactions(rowRefund.get(i).getOrderType(), 1, convertToEnglish(today), Settings.POS_number, Settings.store_number,
                                    String.valueOf(transactionsSize), i + 1, "" + rowRefund.get(i).getItemBarcode(), rowRefund.get(i).getItemName(),
                                    rowRefund.get(i).getSecondaryName(), rowRefund.get(i).getKitchenAlias(), rowRefund.get(i).getItemCategory(),
                                    rowRefund.get(i).getItemFamily(), rowRefund.get(i).getQty(), rowRefund.get(i).getPrice(),
                                    rowRefund.get(i).getQty() * rowRefund.get(i).getPrice(), -1 * rowRefund.get(i).getDiscount(), -1 * rowRefund.get(i).getlDiscount(), -1 * (rowRefund.get(i).getDiscount() + rowRefund.get(i).getlDiscount()), -1 * rowRefund.get(i).getTaxValue(),
                                    rowRefund.get(i).getTaxPerc(), rowRefund.get(i).getTaxKind(), -1 * rowRefund.get(i).getService(), -1 * rowRefund.get(i).getServiceTax(),
                                    rowRefund.get(i).getTableNo(), rowRefund.get(i).getSectionNo(), Settings.shift_number, Settings.shift_name, Settings.user_no, Settings.user_name, convertToEnglish(times), rowRefund.get(i).getVoucherNo(), rowRefund.get(i).getPosNo(), 0, Settings.cash_no);
                            mDHandler.addOrderTransaction(orderTransactions);
                        }
                        for (int i = 0; i < tableLayout.getChildCount(); i++) {
                            TableRow rowTemp = (TableRow) tableLayout.getChildAt(i);
                            TextView name_o = (TextView) rowTemp.getChildAt(0);
                            TextView value_o = (TextView) rowTemp.getChildAt(1);

                            if (!value_o.getText().toString().equals("") && Double.parseDouble(value_o.getText().toString()) != 0) {
                                PayMethod payMethod = new PayMethod(list.get(0).getOrderType(),
                                        1,
                                        convertToEnglish(today),
                                        Settings.POS_number,
                                        Settings.store_number, String.valueOf(transactionsSize), i + 1, name_o.getText().toString(),
                                        -1 * Double.parseDouble(value_o.getText().toString()), finalAllPayType.get(i).getPayNumber(), finalAllPayType.get(i).getPayName(),
                                        Settings.shift_name, Settings.shift_number, Settings.user_name, Settings.user_no, convertToEnglish(times),
                                        rowRefund.get(0).getVoucherNo(), Settings.POS_number, Settings.cash_no);
                                payObj.add(payMethod);
                                mDHandler.addAllPayMethodItem(payMethod);
                            }
                        }
                        for (int i = 0; i < rowRefund.size(); i++) {
                            mDHandler.updateOrderTrancactionReturn(rowRefund.get(i).getPosNo(), rowRefund.get(i).getItemBarcode(), rowRefund.get(i).getVoucherNo(), "0", rowRefund.get(i).getQty() + rowRefund.get(i).getReturnQty());
                        }

                        List<ItemWithScreen> itemWithScreens = mDHandler.getAllItemsWithScreen();
                        PayMethods pay = new PayMethods();

                        orderHeader.setVoucherNumber(rowRefund.get(0).getVoucherNo());
                        pay.sendToKitchen(Main.this, orderHeader, rowRefund, payObj, itemWithScreens);

                        rowRefund.get(0).setVoucherNo("" + transactionsSize);
                        orderHeader.setVoucherNumber("" + transactionsSize);
                        pay.sendToServer(Main.this, orderHeader, rowRefund, payObj);

                        netTotals = 0.0;

                        mDHandler.updateMaxVhfRefund(String.valueOf(transactionsSize));

                        PayRefund.dismiss();

                    } else
                        new Settings().makeText(Main.this, "Please Change filed Has grater value than what are you pay before ..  ");
                } else {
                    new Settings().makeText(Main.this, getResources().getString(R.string.total_not_allow));
                }


            }
        });
        exit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                PayRefund.dismiss();

            }
        });

        nettotal.setText("" + threeDForm.format(netTotals));

        PayRefund.show();
    }

    void insertPayTypeForThisVhf(String list, String value, TableLayout recipeTable) {
        final TableRow row = new TableRow(Main.this);
        TableRow.LayoutParams lp = new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT);
        row.setLayoutParams(lp);

        row.setPadding(0, 0, 0, 20);
        for (int i = 0; i < 3; i++) {

            final TextView textView = new TextView(Main.this);
            final TextView textView2 = new TextView(Main.this);
            switch (i) {
                case 0:
                    textView.setText("" + list);
                    textView.setTextColor(ContextCompat.getColor(Main.this, R.color.text_color));
                    TableRow.LayoutParams lp2 = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, 30, 0.5f);
                    lp2.setMargins(0, 0, 4, 0);
                    textView.setTextSize(20);
                    textView.setLayoutParams(lp2);
                    row.addView(textView);
                    break;
                case 1:
                    textView2.setText("0.0");
                    textView2.setTextColor(ContextCompat.getColor(Main.this, R.color.text_color));
                    textView2.setGravity(Gravity.CENTER);
                    textView2.setBackgroundColor(ContextCompat.getColor(Main.this, R.color.layer2));
                    TableRow.LayoutParams lp5 = new TableRow.LayoutParams(100, 30, 1.0f);
                    textView2.setTextSize(20);
                    textView2.setTag(value);
                    textView2.setLayoutParams(lp5);
                    row.addView(textView2);
                    break;
                case 2:
                    textView.setText("0");
                    textView.setTextColor(ContextCompat.getColor(Main.this, R.color.text_color));
                    textView.setGravity(Gravity.CENTER);
                    TableRow.LayoutParams lp6 = new TableRow.LayoutParams(0, 0, 1);
                    textView.setTextSize(20);
                    textView.setLayoutParams(lp6);
                    row.addView(textView);
                    break;

            }


            textView2.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    flag = true;
                    textView2.setText("");
                    focusedTextView = textView2;
                }
            });

            textView2.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
//                    Toast.makeText(Main.this, "value " + textView2.getTag().toString(), Toast.LENGTH_SHORT).show();
                    double Total = 0.0;
                    if (!textView2.getText().toString().equals("")) {
//                        if (Double.parseDouble(textView2.getText().toString()) <= Double.parseDouble(textView2.getTag().toString())) {
                        for (int i = 0; i < recipeTable.getChildCount(); i++) {
                            TableRow rowTemp = (TableRow) recipeTable.getChildAt(i);
                            TextView value_o = (TextView) rowTemp.getChildAt(1);
                            TextView ISGrater_o = (TextView) rowTemp.getChildAt(2);
                            Log.e("in for ==>", "yy" + value_o.getText().toString());
                            if (!value_o.getText().toString().equals("")) {
                                if (!value_o.getText().toString().equals(".")) {
                                    if (Double.parseDouble(value_o.getText().toString()) <= Double.parseDouble(value_o.getTag().toString())) {
                                        Total += Double.parseDouble(value_o.getText().toString());
                                        double net_total = netTotals - Total;
                                        Log.e("net_Total_123 ==>", "" + net_total);
                                        nettotal.setText(threeDForm.format(net_total));
                                        ISGrater_o.setText("0");
                                    } else {
                                        new Settings().makeText(Main.this, "Can't return value grater than  " + value_o.getTag().toString());
                                        ISGrater_o.setText("1");
                                    }
                                }
                            } else {
                                value_o.setText("0");
                            }
                        }


                    }


                }

                @Override
                public void afterTextChanged(Editable s) {

                }
            });

        }

        recipeTable.addView(row);
        textId++;
    }


    public void notCorrectValueDialog(String mass) {
        Dialog dialog1 = new Dialog(Main.this);
        dialog1.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog1.setCancelable(false);
        dialog1.setContentView(R.layout.not_correct_dialog);
        dialog1.setCanceledOnTouchOutside(true);
        TextView text = (TextView) dialog1.findViewById(R.id.not);

        text.setText(mass);

        dialog1.show();

    }


    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
    void showBreakTimeOut() {
        dialog = new Dialog(Main.this);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setCancelable(false);
        dialog.setContentView(R.layout.time_break_out_dialog);
        dialog.setCanceledOnTouchOutside(true);

        Window window = dialog.getWindow();
        //window.setLayout(590, 390);

        Button breakOut;
        TextView date, username;
        final TextClock time;
        final EditText remark;
        breakOut = (Button) dialog.findViewById(R.id.breaks_out);

        time = (TextClock) dialog.findViewById(R.id.horas2);
        date = (TextView) dialog.findViewById(R.id.date4);
        username = (TextView) dialog.findViewById(R.id.username4);

        remark = (EditText) dialog.findViewById(R.id.remark4);

        Date currentTimeAndDate = Calendar.getInstance().getTime();
        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        final String dates = df.format(currentTimeAndDate);
        date.setText(dates);

        username.setText(Settings.user_name);

        breakOut.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
                final String times = time.getText().toString();
                ClockInClockOut clockInClockOut = new ClockInClockOut();

                clockInClockOut.setPointOfSaleNumber(Settings.POS_number);
                clockInClockOut.setDate(dates);
                clockInClockOut.setUserNO(Settings.user_no);
                clockInClockOut.setUserName(Settings.user_name);
                clockInClockOut.setTranstype("BreakOut");
                clockInClockOut.setDateCard(dates);
                clockInClockOut.setTimeCard(times);
                clockInClockOut.setRemark((remark.getText().toString()));
                clockInClockOut.setShiftNo(Settings.shift_number);
                clockInClockOut.setShiftName(Settings.shift_name);

                mDHandler.addClockInClockOut(clockInClockOut);

                Settings.time_card = 1;
            }
        });


        dialog.show();
    }


    @Override
    public void onBackPressed() {
        super.onBackPressed();

    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            return false;
        }
        return super.onKeyDown(keyCode, event);
    }

    void initialize() {

        back = (Button) findViewById(R.id.back);
        exit = (Button) findViewById(R.id.exit);
        takeAway = (Button) findViewById(R.id.tack_away);
        dineIn = (Button) findViewById(R.id.dine_in);
        refund = (TextView) findViewById(R.id.refund);
        userName = (TextView) findViewById(R.id.user_name);
        shift = (TextView) findViewById(R.id.shift);
        date = (TextView) findViewById(R.id.date);

        payIn = (TextView) findViewById(R.id.pay_in);
        payOut = (TextView) findViewById(R.id.pay_out);
        timeCard = (TextView) findViewById(R.id.time_card);
        safeMode = (TextView) findViewById(R.id.safe_mode);
        cashDrawer = (TextView) findViewById(R.id.cash_drawer);

        annText = (TextView) findViewById(R.id.annText);
        AnnouncementTable = (TableLayout) findViewById(R.id.AnnouncmentTable);

        back.setOnClickListener(onClickListener);
        exit.setOnClickListener(onClickListener);
        takeAway.setOnClickListener(onClickListener);
        dineIn.setOnClickListener(onClickListener);

        payIn.setOnClickListener(onClickListener);
        payOut.setOnClickListener(onClickListener);
        timeCard.setOnClickListener(onClickListener);
        safeMode.setOnClickListener(onClickListener);
        cashDrawer.setOnClickListener(onClickListener);
        refund.setOnClickListener(onClickListener);

        back.setOnTouchListener(onTouchListener);
        exit.setOnTouchListener(onTouchListener);
        takeAway.setOnTouchListener(onTouchListener);
        dineIn.setOnTouchListener(onTouchListener);
    }

    public Bitmap StringToBitMap(String image) {
        try {
            byte[] encodeByte = Base64.decode(image, Base64.DEFAULT);
            Bitmap bitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
            return bitmap;
        } catch (Exception e) {
            e.getMessage();
            return null;
        }
    }


}


